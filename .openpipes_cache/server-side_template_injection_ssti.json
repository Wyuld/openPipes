{
  "title": "Server-side Template Injection (SSTI)",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
  "description": "Quando um usuário solicita uma visualização HTML, os aplicativos modernos a geram usando um mecanismo de template (também conhecido como &quot;templates&quot;). As funções integradas da linguagem de programação nesses mecanismos de template permitem a execução de funções de risco e até mesmo de código no servidor que hospeda o aplicativo. É possível usar essas funções para executar código no servidor se um usuário mal-intencionado conseguir injetar diretivas de template, e estas serão então renderizadas pelo mecanismo de template.",
  "observation": "Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota. Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar. Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário. Não-repúdio: Ocultar atividades: Muitas vezes, as ações executadas pelo código de controle injetado não são registradas.",
  "remediation": "Certifique-se de não passar variáveis controláveis pelo usuário para as funções que renderizam modelos. A higienização da entrada é crucial caso seja necessário para evitar que caracteres sejam interpretados.",
  "references": [
    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection",
    "https://cwe.mitre.org/data/definitions/94.html",
    "https://portswigger.net/research/server-side-template-injection"
  ]
}
