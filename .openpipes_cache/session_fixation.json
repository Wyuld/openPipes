{
  "title": "Session Fixation",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "description": "Autenticar um usuário ou estabelecer uma nova sessão de usuário sem invalidar nenhum identificador de sessão existente dá ao invasor a oportunidade de roubar sessões autenticadas. Este cenário é comumente observado quando: Um aplicativo web autentica um usuário sem primeiro invalidar a sessão existente, continuando assim a sessão já associada ao usuário. Um invasor é capaz de forçar um identificador de sessão conhecido em um usuário para que, depois que o usuário se autenticar, o invasor tenha acesso à sessão autenticada. A aplicação ou contêiner utiliza identificadores de sessão previsíveis. Na exploração genérica de vulnerabilidades de fixação de sessão, um invasor cria uma nova sessão em uma aplicação web e registra o identificador de sessão associado. O invasor então faz com que a vítima associe e, possivelmente, autentique o servidor usando esse identificador de sessão, concedendo ao invasor acesso à conta do usuário por meio da sessão ativa.",
  "observation": "Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.",
  "remediation": "A contramedida para uma vulnerabilidade de fixação de sessão é codificar o aplicativo de forma que ele não aceite um token que foi forçado na sessão da vítima. As etapas a seguir fornecem uma maneira robusta de proteger um aplicativo da web contra esses ataques: Não aceite identificadores de sessão em parâmetros GET ou POST. Isso dificulta muito a exploração por um invasor, pois é mais fácil induzir a vítima a fazer a solicitação sem vulnerabilidades no navegador. Além disso, todos os IDs de sessão devem ser gerados pelo servidor; não deve haver necessidade de o cliente propor um novo ID de sessão para o aplicativo. Alterar o ID da sessão após o login. O servidor deve gerar um novo ID de sessão e defini-lo como um cookie após o login do usuário. Qualquer sessão existente do usuário deve ser destruída no servidor. Forneça uma função de logout e expire sessões antigas. O usuário deve poder escolher quando encerrar sua sessão com o aplicativo, o que deve encerrar imediatamente qualquer sessão atual no servidor e não simplesmente excluir o cookie do navegador. Os dados da sessão também devem expirar automaticamente após um determinado período, para reduzir o tempo que um invasor pode usar uma sessão comprometida.",
  "references": [
    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation",
    "https://cwe.mitre.org/data/definitions/384.html"
  ]
}
