{
  "title": "Command Injection",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
  "description": "Vulnerabilidades de injeção de comando geralmente ocorrem quando: Os dados entram no aplicativo de uma fonte não confiável. Os dados são parte de uma string que é executada como um comando pelo aplicativo. Ao executar o comando, o aplicativo concede ao invasor um privilégio ou capacidade que ele não teria de outra forma. Muitos protocolos e produtos possuem sua própria linguagem de comando personalizada. Embora strings de comando de shell ou de sistema operacional sejam frequentemente descobertas e alvos, os desenvolvedores podem não perceber que essas outras linguagens de comando também podem ser vulneráveis ​​a ataques.",
  "observation": "Integridade: Executar códigos ou comandos não autorizados: Se um usuário mal-intencionado injetar um caractere (como ponto e vírgula) que delimita o fim de um comando e o início de outro, pode ser possível inserir um comando totalmente novo e não relacionado que não deveria ser executado. Confidencialidade: Leitura de dados do aplicativo: O código injetado pode acessar dados/arquivos restritos. Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota. Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar. Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário. Não repúdio: ocultar atividades: muitas vezes, as ações executadas pelo código de controle injetado não são registradas.",
  "remediation": "É recomendável limitar ao máximo as capacidades do usuário ao permitir que ele execute comandos específicos no servidor e avaliar e avaliar, em primeira instância, se é absolutamente necessário que o usuário consiga realizar esse tipo de ação, pois elas envolvem um perigo potencial inerente. Seria apropriado restringir esses recursos, visto que muitas linguagens têm funções integradas para executar comandos no computador, como a função system() em PHP, e que é possível restringir os recursos do interpretador que executa o aplicativo (como no caso do PHP).",
  "references": [
    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
    "https://portswigger.net/web-security/os-command-injection",
    "https://cwe.mitre.org/data/definitions/77.html",
    "https://cwe.mitre.org/data/definitions/78.html"
  ]
}
