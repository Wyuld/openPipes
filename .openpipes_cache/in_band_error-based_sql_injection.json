{
  "title": "In Band Error-based SQL Injection",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
  "description": "Uma interação inesperada com o banco de dados, conhecida como ataque de injeção de SQL (SQLi), tenta obter informações ou até mesmo executar comandos usando essa falha. Como se trata de uma injeção de SQL baseada em erro, neste caso, a resposta não fornece informações diretamente sobre o erro; em vez disso, o invasor precisa interpretar as mensagens de erro fornecidas pelo servidor para obter as informações.",
  "observation": "Confidencialidade: Leitura de dados do aplicativo: Como os bancos de dados SQL geralmente contêm dados confidenciais, a perda de confidencialidade é um problema frequente com vulnerabilidades de injeção de SQL. Controle de acesso: Mecanismo de proteção de bypass: Se comandos SQL ruins forem usados para verificar nomes de usuários e senhas, pode ser possível conectar-se a um sistema como outro usuário sem nenhum conhecimento prévio da senha. Controle de acesso: Mecanismo de proteção contra bypass: Se as informações de autorização forem mantidas em um banco de dados SQL, pode ser possível alterar essas informações por meio da exploração bem-sucedida de uma vulnerabilidade de injeção de SQL. Integridade: Modificar dados do aplicativo: Assim como é possível ler informações confidenciais, também é possível fazer alterações ou até mesmo excluir essas informações com um ataque de injeção de SQL.",
  "remediation": "É recomendável higienizar os parâmetros de entrada do aplicativo para resolver esse problema, pois isso evita que invasores introduzam caracteres que podem alterar a consulta SQL e permitir a recuperação de informações. A principal sugestão é implementar um sistema de &quot;Lista Branca&quot;, onde apenas as palavras e caracteres definidos na lista são aceitos e qualquer outro valor é ignorado antes de ser usado no banco de dados. Se essa opção não for viável, uma &quot;Lista Negra&quot; que evite os caracteres definidos pode ser criada usando caracteres vulneráveis a esse tipo de ataque, como % #&#39;&quot;&quot;&quot;&quot;&#39;&quot;&quot;&quot; () +, ; e palavras-chave de consulta SQL como &quot;select&quot;, &quot;where&quot;, &quot;union&quot;, &quot;join&quot; e &quot;update&quot;. Além disso, você deve procurar por quaisquer variações de codificação para esses caracteres, como codificação de URL, unicode/UTF-8 e hexadecimal.",
  "references": [
    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
    "https://cwe.mitre.org/data/definitions/89.html"
  ]
}
