{
  "title": "Improper Authorization",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "description": "Quando um ator tenta acessar um recurso ou executar uma ação, o software não executa ou executa incorretamente uma verificação de autorização. Com base nos privilégios do usuário e em quaisquer permissões ou outros requisitos de controle de acesso que se aplicam ao recurso, a autorização é o processo de determinar se um usuário com uma determinada identidade pode acessar um recurso específico. Os usuários conseguem acessar dados ou realizar ações que não deveriam ser capazes de realizar quando as verificações de controle de acesso não são aplicadas de forma consistente, ou mesmo não são aplicadas. Isso pode gerar inúmeros problemas, como exposição de informações, ataques de negação de serviço e execução arbitrária de código.",
  "observation": "Confidencialidade: Ler arquivos ou diretórios: Um invasor pode ler dados confidenciais, lendo os dados diretamente de um armazenamento de dados que não é devidamente restrito ou acessando funcionalidades privilegiadas e insuficientemente protegidas para ler os dados. Integridade: modificar arquivos ou diretórios: um invasor pode modificar dados confidenciais, gravando os dados diretamente em um armazenamento de dados que não esteja devidamente restrito ou acessando funcionalidades privilegiadas e insuficientemente protegidas para gravar os dados. Controle de acesso: obtenha privilégios ou assuma identidade: um invasor pode obter privilégios modificando ou lendo dados críticos diretamente ou acessando funcionalidades privilegiadas e insuficientemente protegidas.",
  "remediation": "Arquitetura e Design Divida o software em áreas anônimas, normais, privilegiadas e administrativas. Reduza a superfície de ataque mapeando cuidadosamente as funções com dados e funcionalidades. Use o controle de acesso baseado em funções (RBAC) para impor as funções nos limites apropriados. Observe que essa abordagem pode não proteger contra autorização horizontal, ou seja, não protegerá um usuário de atacar outros com a mesma função. Certifique-se de realizar verificações de controle de acesso relacionadas à sua lógica de negócios. Essas verificações podem ser diferentes das verificações de controle de acesso que você aplica a recursos mais genéricos, como arquivos, conexões, processos, memória e registros de banco de dados. Por exemplo, um banco de dados pode restringir o acesso a registros médicos a um usuário específico, mas cada registro pode ser destinado apenas ao paciente e ao médico do paciente. Use uma biblioteca ou estrutura verificada que não permita que essa fraqueza ocorra ou que forneça construções que tornem essa fraqueza mais fácil de evitar. Por exemplo, considere usar estruturas de autorização como o JAAS Authorization Framework REF-233 e o recurso OWASP ESAPI Access Control REF-45. Para aplicações web, certifique-se de que o mecanismo de controle de acesso seja aplicado corretamente no lado do servidor em todas as páginas. Os usuários não devem conseguir acessar nenhuma funcionalidade ou informação não autorizada simplesmente solicitando acesso direto à página. Uma maneira de fazer isso é garantir que todas as páginas que contêm informações confidenciais não sejam armazenadas em cache e que todas essas páginas restrinjam o acesso a solicitações acompanhadas por um token de sessão ativo e autenticado associado a um usuário que tenha as permissões necessárias para acessar essa página. Configuração do sistema: Instalação Utilize os recursos de controle de acesso do seu sistema operacional e ambiente de servidor e defina suas listas de controle de acesso adequadamente. Use uma política de &quot;negação padrão&quot; ao definir essas ACLs.",
  "references": [
    "https://cwe.mitre.org/data/definitions/285.html"
  ]
}
