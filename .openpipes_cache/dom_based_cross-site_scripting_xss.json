{
  "title": "DOM Based Cross-site Scripting (XSS)",
  "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
  "description": "Um ataque XSS conhecido como XSS baseado em DOM faz com que o código do lado do cliente seja executado de maneira &quot;inesperada&quot;, alterando o &quot;ambiente&quot; DOM que o navegador da vítima foi projetado para usar pelo script original do lado do cliente. Como resultado de alterações maliciosas feitas no ambiente DOM, o código do lado do cliente contido na página é executado de forma diferente, embora a própria página (ou seja, a resposta HTTP) permaneça a mesma. Outros ataques XSS (armazenados ou refletidos), por outro lado, colocam a carga do ataque na página de resposta (devido a uma falha no lado do servidor).",
  "observation": "Confidencialidade: Leitura de Dados do Aplicativo: O ataque mais comum realizado com cross-site scripting envolve a divulgação de informações armazenadas em cookies do usuário. Normalmente, um usuário mal-intencionado cria um script do lado do cliente que, quando analisado por um navegador, realiza alguma atividade (como enviar todos os cookies do site para um determinado endereço de e-mail). Esse script será carregado e executado por cada usuário que visita o site. Como o site que solicita a execução do script tem acesso aos cookies em questão, o script malicioso também tem. Disponibilidade: Executar códigos ou comandos não autorizados: Em algumas circunstâncias, pode ser possível executar código arbitrário no computador de uma vítima quando o cross-site scripting é combinado com outras falhas. Controle de Acesso: Leitura de Dados de Aplicativos: A consequência de um ataque XSS é a mesma, independentemente de ser armazenado ou refletido. A diferença está em como o payload chega ao servidor. O XSS pode causar uma variedade de problemas para o usuário final, cuja gravidade varia de um incômodo ao comprometimento total da conta. Algumas vulnerabilidades de cross-site scripting podem ser exploradas para manipular ou roubar cookies, criar solicitações que podem ser confundidas com as de um usuário válido, comprometer informações confidenciais ou executar código malicioso nos sistemas do usuário final para uma variedade de propósitos nefastos. Outros ataques prejudiciais incluem a divulgação de arquivos do usuário final, a instalação de programas de Cavalo de Troia, o redirecionamento do usuário para outra página ou site, a execução de controles &quot;Active X&quot; (no Microsoft Internet Explorer) de sites que o usuário considera confiáveis e a modificação da apresentação do conteúdo.",
  "remediation": "Não existe uma ação única que possa eliminar completamente a ameaça de ataques baseados em DOM. De modo geral, porém, a maneira mais eficaz de prevenir vulnerabilidades baseadas em DOM é impedir que dados de qualquer fonte não confiável alterem dinamicamente o valor passado a qualquer destinatário. Se a funcionalidade desejada da aplicação tornar esse comportamento inevitável, defesas devem ser implementadas no código do lado do cliente. Em muitos casos, dados relevantes podem ser validados em uma lista de permissões, permitindo apenas conteúdo sabidamente seguro. Em outros casos, será necessário sanitizar ou criptografar os dados. Essa pode ser uma tarefa complexa e, dependendo do contexto em que os dados serão inseridos, pode envolver uma combinação de escape de JavaScript, codificação HTML e codificação de URL, na sequência apropriada.",
  "references": [
    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
    "https://cwe.mitre.org/data/definitions/79.html"
  ]
}
