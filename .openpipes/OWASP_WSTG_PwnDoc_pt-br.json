[
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information Indexed in Web Search Engines or Other Public Sources",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os mecanismos de busca podem ser usados para realizar o reconhecimento de sites e aplicações. Existem elementos diretos e indiretos na descoberta e reconhecimento por mecanismos de busca: métodos diretos estão relacionados à pesquisa nos índices e conteúdos associados em caches, enquanto os métodos indiretos estão relacionados ao aprendizado de informações sensíveis sobre a estrutura e configuração ao buscar em fóruns, grupos de discussão e sites.</p><p>Usando buscadores como Google, DuckDuckGo ou Bing é possível encontrar informações potencialmente sensíveis, como:</p><ul><li><p>Diagramas e configurações de rede.</p></li><li><p>Mensagens e e-mails arquivados de administradores ou outros profissionais-chave.</p></li><li><p>Procedimentos de login e formatos de nome de usuário.</p></li><li><p>Nomes de usuário, senhas e chaves privadas.</p></li><li><p>Arquivos de configuração de terceiros ou serviços em nuvem.</p></li><li><p>Conteúdo de mensagens de erro reveladoras.</p></li><li><p>Versões de desenvolvimento, testes, testes de aceitação do usuário (UAT) e versões de teste das aplicações.</p></li></ul>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Antes de publicar uma aplicação, é essencial considerar a sensibilidade dos dados nela expostos a fim de prevenir a divulgação acidental de informações confidenciais.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://wiki.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_(OWASP-IG-004)"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in HTTP Headers",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa situação ocorre quando a aplicação revela o tipo e/ou versão de um componente interno usado, ao expor informações nos cabeçalhos do protocolo HTTP. Através dessas informações, o sistema operacional, um de seus serviços (web, e-mail, transferência de arquivos...) ou um de seus componentes (PHP, mod_proxy, WebDAV...) pode ser identificado.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Para evitar esse tipo de divulgação de informações, é necessário ocultar os dados exibidos nos cabeçalhos do protocolo. </p><p>Uma correção, que geralmente consiste em uma atualização ou aplicação de patch específico, é tipicamente necessária para corrigir as vulnerabilidades publicadas dos componentes detectados, devendo-se seguir as recomendações do fabricante do software vulnerável.</p><p>Pode ser necessário decidir entre interromper a oferta do serviço até que uma solução seja encontrada ou assumir o risco de continuar oferecendo mesmo na ausência de uma correção publicada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in Application Cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>A configuração dos cookies expõe informações sensíveis tanto no nome pré-estabelecido do cookie quanto em seu conteúdo, o que leva a essa vulnerabilidade. Por exemplo, um cookie com o nome do software com o qual foi criado.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Para evitar esse tipo de divulgação de informações, é necessário ocultar os dados exibidos nos cookies ou alterar seus nomes ou conteúdos.</p><p>Para corrigir as vulnerabilidades publicadas dos componentes detectados, normalmente é necessário seguir as recomendações do fabricante, o que geralmente envolve atualizar o software ou aplicar um patch específico.</p><p>Pode ser necessário decidir entre parar de oferecer o serviço até que uma solução seja encontrada ou assumir o risco de continuar sem uma solução publicada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://developers.google.com/search/docs/advanced/robots/intro"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'robots.txt' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>Alguns programas utilizam robôs de indexação para navegar automaticamente em sites com o objetivo de indexá-los. Qualquer usuário pode acessar o arquivo \"robots.txt\", que é usado para especificar diretórios e recursos que o administrador deseja que sejam indexados ou não. A configuração desse arquivo precisa ser tratada com cautela, pois pode revelar quais recursos são sensíveis.</p><p>O arquivo \"robots.txt\" pode conter recursos sensíveis que podem ser usados por um atacante para lançar ataques mais sofisticados e direcionados com base nos dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>O arquivo 'robots.txt' não deve ser usado como método de restrição de acesso a áreas inseguras da aplicação. Além da proteção contra robôs de indexação, o acesso a essas seções deve ser devidamente controlado contra ataques potenciais.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'sitemap.xml' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um desenvolvedor ou organização pode fornecer detalhes sobre os recursos disponíveis na aplicação e suas conexões no arquivo \"sitemap.xml\".</p><p>O arquivo \"sitemap.xml\" pode conter recursos sensíveis que podem ser usados por um atacante para lançar ataques mais avançados e direcionados com base nos dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"sitemap.xml\" quaisquer dados sensíveis que não sejam necessários para o desenvolvimento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'security.txt' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um padrão proposto permite que páginas web especifiquem políticas de segurança e informações de contato no arquivo \"security.txt\".</p><p>O arquivo \"security.txt\" pode conter informações sensíveis que poderiam ser usadas por um atacante para lançar ataques mais sofisticados e direcionados com base nos dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"security.txt\" todos os dados privados que não sejam necessários para o desenvolvimento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'humans.txt' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>O arquivo \"humans.txt\" é um projeto para informar mais sobre as pessoas que criam um site.</p><p>Esse arquivo pode conter informações sensíveis que poderiam ser usadas por um atacante para lançar ataques mais sofisticados e direcionados com base nos dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"humans.txt\" todos os dados privados que não sejam necessários para o desenvolvimento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/540.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the Source Code",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa situação ocorre quando, ao analisar um arquivo carregado em um servidor web, são reveladas informações relacionadas ao servidor que podem ser usadas para planejar novos ataques, como o tipo e a versão das aplicações utilizadas, componentes ou extensões em uso, credenciais etc.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Para evitar vazamento de informações sensíveis, o código-fonte HTML enviado pelo servidor deve ser revisado e modificado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/497.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information Because Debug Mode Is Enabled",
        "vulnType": "OWASP WSTG",
        "description": "<p>O uso de um \"parâmetro de debug habilitado\" pode, em alguns casos, permitir a exibição de dados técnicos ou segredos comerciais dentro da aplicação. Isso aumenta a superfície de ataque, pois o invasor passa a conhecer mais sobre o funcionamento da aplicação. Em alguns casos, habilitar a flag de debug pode até resultar em ataques de execução de código (ex.: versões antigas do werkzeug).</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Aplicações em produção nunca devem gerar informações internas como rastreamentos de pilha (stack traces) e mensagens de erro, a menos que sejam registradas diretamente em logs inacessíveis ao usuário final. Todas as mensagens de erro devem ser codificadas em entidades HTML antes de serem gravadas no log, prevenindo ataques de cross-site scripting contra o visualizador de logs.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information (generic)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma senha, por exemplo, é uma informação sensível que pode ser valiosa por si só ou ser usada para lançar outros ataques mais graves (como obter uma mensagem de erro não controlada). O conteúdo de mensagens de erro pode ser usado por um invasor para apoiar o lançamento de outro ataque mais direcionado. Uma exploração de enumeração de diretórios ou falha de path traversal, por exemplo, pode revelar o caminho completo da aplicação instalada.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Crie \"áreas seguras\" dentro do sistema onde as fronteiras de confiança possam ser claramente definidas. Não permita que informações sensíveis atravessem essas fronteiras e adote extrema cautela ao interagir com compartimentos fora de áreas seguras.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://cwe.mitre.org/data/definitions/359.html"
        ],
        "locale": "en",
        "title": "Disclosure of Credentials (credentials Leak)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Foi possível verificar e identificar a existência de arquivos contendo informações sensíveis, como credenciais válidas para acesso a outros sistemas, em diversos endpoints. O acesso a essas credenciais não requer cookies ou qualquer tipo de autenticação prévia.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Independentemente do software em que essas credenciais de usuário sejam usadas, nunca é recomendado expor arquivos sensíveis que contenham credenciais.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/798.html"
        ],
        "locale": "en",
        "title": "Use of Hard-coded Credentials",
        "vulnType": "OWASP WSTG",
        "description": "<p>Para sua própria criptografia de dados internos, comunicação de saída com componentes externos e autenticação de entrada, o software possui credenciais codificadas de forma fixa, como senhas ou chaves criptográficas. Credenciais hardcoded frequentemente geram uma grande brecha de segurança que permite a um atacante contornar as configurações de autenticação definidas pelo administrador do software.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Bypass de Mecanismo de Proteção: Se senhas hardcoded forem usadas, é quase certo que usuários maliciosos obtenham acesso à conta em questão.</p></li><li><p>Controle de Acesso: Execução de Código ou Comandos Não Autorizados: Essa fraqueza pode expor recursos ou funcionalidades a atores não intencionais, possibilitando que atacantes obtenham informações sensíveis ou até executem código arbitrário.</p></li></ul>",
        "remediation": "<p>Em vez de segredos e chaves de API estáticas, utilize tokens de sessão.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://capec.mitre.org/data/definitions/118.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the Metadata of Files Available in the Application",
        "vulnType": "OWASP WSTG",
        "description": "<p>O termo \"metadados\" refere-se a informações de caráter descritivo sobre um documento. Também podem incluir informações de administração e gerenciamento.</p><p>O conjunto de dados que caracteriza ou define uma determinada informação associada a eles é chamado de metadados. Ao enriquecer a informação a que estão ligados, os metadados tornam a interpretação computacional muito mais completa e melhoram a recuperação de documentos.</p><p>Já foi identificado que metadados podem ser explorados para extrair informações sensíveis.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>É recomendado que todos os arquivos disponibilizados pela aplicação tenham seus metadados removidos antes de serem publicados na rede, mitigando essa vulnerabilidade.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in Default Content",
        "vulnType": "OWASP WSTG",
        "description": "<p>Isso ocorre quando arquivos padrão permanecem acessíveis após a instalação de um serviço ou aplicação. Devido ao tipo de informação que divulgam, como o tipo e a versão do servidor web utilizado, a presença de arquivos padrão em um servidor web representa uma ameaça.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Para corrigir, todos os arquivos padrão que não sejam necessários para o funcionamento do servidor devem ser removidos, incluindo as páginas padrão instaladas junto com o servidor.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/538.html",
          "https://www.owasp.org/index.php/Full_Path_Disclosure"
        ],
        "locale": "en",
        "title": "Disclosure of Internal Server Paths and Directories",
        "vulnType": "OWASP WSTG",
        "description": "<p>Esse problema ocorre sempre que o caminho absoluto de um servidor web ou de uma aplicação nele hospedada pode ser identificado por algum mecanismo, como mensagens de erro ou rastreamento de parâmetros enviados.</p><p>Assim, é possível descobrir o diretório absoluto do servidor onde o conteúdo web é armazenado.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>A ação corretiva depende do tipo de falha que levou à divulgação. Se a informação foi obtida via mensagem de erro, é essencial substituir essas mensagens por respostas genéricas que apenas indiquem uma situação anormal, sem detalhes técnicos. Caso o caminho tenha sido revelado por parâmetro de aplicação, a lógica deve ser alterada para exibir apenas caminhos relativos, ou nenhum.</p><p>É recomendado substituir as mensagens de erro do servidor por mensagens genéricas e usar o arquivo de configuração do servidor para aplicar essas alterações.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/548.html"
        ],
        "locale": "en",
        "title": "Directory Listing",
        "vulnType": "OWASP WSTG",
        "description": "<p>O directory listing é um recurso que, quando habilitado, faz com que servidores web listem o conteúdo de um diretório quando não há um arquivo de índice presente (ex.: index.php ou index.html). Assim, se um diretório for acessado sem arquivo de índice e o listing estiver habilitado, o servidor exibirá uma listagem de arquivos.</p><p>Quando isso acontece, há um problema de vazamento de dados, que pode ser explorado para a construção de outros ataques, incluindo vulnerabilidades como XSS. Embora útil em ambientes de desenvolvimento, não é uma boa prática para servidores em produção.</p><p>O fato de um servidor permitir a listagem de diretórios traz várias implicações de segurança:</p><ul><li><p>Permite que usuários baixem arquivos ou acessem diretórios que não deveriam estar disponíveis.</p></li><li><p>Pode revelar informações técnicas úteis para atacantes sobre o servidor web.</p></li><li><p>Exibe todo o conteúdo de um diretório, sem distinguir entre arquivos públicos e privados.</p></li></ul><p>Isso frequentemente ocorre por acidente, quando o servidor não encontra um arquivo de índice válido.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Arquivos ou Diretórios: Expor o conteúdo de um diretório pode permitir que o atacante acesse código-fonte ou obtenha informações úteis para explorar vulnerabilidades, como horários de criação de arquivos ou informações embutidas em nomes. Pode também comprometer dados privados ou confidenciais.</p></li></ul>",
        "remediation": "<p>Configurar corretamente o servidor. Servidores web como NGINX, Apache ou IIS devem ser configurados para impedir a listagem de diretórios ou a navegação por caminhos. Por exemplo, em Apache, pode-se criar um arquivo .htaccess no diretório da aplicação para desabilitar o directory listing. Também é possível remover as diretivas Indexes e MultiViews do arquivo httpd.conf.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/311.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
          "https://wiki.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)"
        ],
        "locale": "en",
        "title": "Absence of SSL/TLS Encryption",
        "vulnType": "OWASP WSTG",
        "description": "<p>Em vez do protocolo HTTPS, a aplicação utiliza HTTP para comunicação com o servidor web. Para impedir que um atacante leia ou altere os dados transmitidos entre cliente e servidor, a comunicação deve ser criptografada. O método mais comum é o uso do HTTPS, que substitui o protocolo SSL pelo TLS. Por meio de um certificado digital confiável, o servidor pode provar ao cliente que está se comunicando com o servidor legítimo.</p><p>Ao longo dos anos, diversas fraquezas criptográficas foram descobertas nos protocolos SSL/TLS e em seus algoritmos. Além disso, muitas implementações desses protocolos também apresentaram vulnerabilidades graves. Por isso, é importante não apenas implementar TLS, mas garantir que ele seja configurado de forma segura.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: Um atacante pode ser capaz de descriptografar os dados por meio de ataques de força bruta.</p></li></ul>",
        "remediation": "<p>O servidor web deve ser configurado para suportar HTTPS. Além disso, é recomendável usar o cabeçalho HSTS e redirecionar todas as requisições HTTP para HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/319.html",
          "https://capec.mitre.org/data/definitions/117.html"
        ],
        "locale": "en",
        "title": "Mixed Content",
        "vulnType": "OWASP WSTG",
        "description": "<p>Conteúdo carregado via protocolo HTTP é utilizado por uma aplicação que funciona sob HTTPS. Como qualquer dado transmitido por HTTP pode ser interceptado e alterado por um atacante, essa prática é considerada insegura.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>O servidor web deve ser configurado para suportar apenas HTTPS. Além disso, é recomendável utilizar o cabeçalho HSTS e redirecionar todas as requisições HTTP para HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/310.html",
          "https://cwe.mitre.org/data/definitions/327.html"
        ],
        "locale": "en",
        "title": "Weak Encryption Algorithms",
        "vulnType": "OWASP WSTG",
        "description": "<p>Diversas falhas na configuração do serviço SSL/TLS no servidor podem resultar em comunicação insegura entre cliente e servidor.</p><p>Os algoritmos de criptografia utilizados pelo serviço SSL/TLS do servidor são considerados fracos ou possuem vulnerabilidades conhecidas.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li><li><p>Controle de Acesso: Modificação de Dados da Aplicação: Um atacante pode induzir o usuário a realizar ações mascaradas e ocultas. O impacto varia conforme a aplicação, podendo, por exemplo, alterar configurações de privacidade em redes sociais.</p></li></ul>",
        "remediation": "<p>Permitir apenas conexões TLS em versões seguras (1.2 ou 1.3) e com algoritmos de criptografia confiáveis.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "locale": "en",
        "title": "Use of Obsolete SSL/TLS Protocol Versions",
        "vulnType": "OWASP WSTG",
        "description": "<p>Para impedir que um atacante leia ou altere dados transmitidos entre cliente e servidor, a comunicação deve ser criptografada. O método mais utilizado é o HTTPS, que substitui o protocolo SSL obsoleto pelo TLS. Usando um certificado digital confiável, o servidor pode demonstrar ao cliente que está conectado ao servidor correto.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O invasor pode conseguir ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>No servidor web, versões inseguras dos protocolos SSL/TLS devem ser desativadas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "locale": "en",
        "title": "Use of Insecure SSL/TLS Cipher Suites",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os conjuntos de cifras (cipher suites) configurados no servidor não garantem um nível adequado de segurança ou apresentam vulnerabilidades conhecidas. Isso pode permitir que um invasor explore falhas no processo de criptografia, comprometendo a confidencialidade ou integridade da comunicação.</p>",
        "observation": "<ul><li><p>Confidencialidade: Um atacante pode conseguir descriptografar informações sensíveis.</p></li><li><p>Integridade: Um atacante pode modificar dados em trânsito sem ser detectado.</p></li></ul>",
        "remediation": "<p>Configure o servidor para utilizar apenas conjuntos de cifras seguros e modernos, desabilitando algoritmos fracos ou obsoletos, como RC4, DES e 3DES.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/326.html",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
        ],
        "locale": "en",
        "title": "Use of Insecure SSL/TLS Renegotiation",
        "vulnType": "OWASP WSTG",
        "description": "<p>A renegociação SSL/TLS insegura pode permitir que um invasor intercepte e injete tráfego malicioso em uma conexão criptografada, explorando a vulnerabilidade conhecida como ataque de renegociação.</p>",
        "observation": "<ul><li><p>Confidencialidade: Possibilidade de leitura de dados transmitidos.</p></li><li><p>Integridade: Possibilidade de injeção de dados em sessões existentes.</p></li></ul>",
        "remediation": "<p>Desabilitar renegociação insegura e garantir que o servidor aceite apenas renegociação segura (Secure Renegotiation).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/295.html"
        ],
        "locale": "en",
        "title": "Invalid SSL/TLS Certificate",
        "vulnType": "OWASP WSTG",
        "description": "<p>O certificado SSL/TLS apresentado pelo servidor não é válido. Ele pode estar expirado, ter sido emitido por uma autoridade de certificação não confiável ou não corresponder ao nome do host. Isso compromete a confiança do usuário na comunicação criptografada.</p>",
        "observation": "<ul><li><p>Confidencialidade: O invasor pode realizar ataques man-in-the-middle, interceptando e lendo dados sensíveis.</p></li></ul>",
        "remediation": "<p>Instalar um certificado SSL/TLS válido, emitido por uma autoridade de certificação confiável e devidamente configurado para o domínio da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/295.html"
        ],
        "locale": "en",
        "title": "Self-signed SSL/TLS Certificate",
        "vulnType": "OWASP WSTG",
        "description": "<p>O servidor utiliza um certificado SSL/TLS autoassinado. Embora permita comunicação criptografada, esse tipo de certificado não garante autenticidade, já que não foi emitido por uma autoridade de certificação confiável.</p>",
        "observation": "<ul><li><p>Confidencialidade: Um atacante pode realizar ataques man-in-the-middle, interceptando dados sensíveis.</p></li></ul>",
        "remediation": "<p>Substituir o certificado autoassinado por um certificado válido emitido por uma autoridade de certificação confiável.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/295.html"
        ],
        "locale": "en",
        "title": "Expired SSL/TLS Certificate",
        "vulnType": "OWASP WSTG",
        "description": "<p>O certificado SSL/TLS utilizado pelo servidor está expirado, o que compromete a confiança dos usuários e pode permitir ataques de interceptação.</p>",
        "observation": "<ul><li><p>Confidencialidade: Um atacante pode explorar a falha de confiança para interceptar dados sensíveis.</p></li></ul>",
        "remediation": "<p>Renovar o certificado SSL/TLS antes de sua data de expiração e implementar processos de monitoramento para evitar que certificados caduquem no futuro.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/295.html"
        ],
        "locale": "en",
        "title": "SSL/TLS Certificate Not Trusted",
        "vulnType": "OWASP WSTG",
        "description": "<p>O certificado SSL/TLS apresentado pelo servidor não é confiável, geralmente porque foi emitido por uma autoridade de certificação (CA) desconhecida ou não confiável. Isso compromete a confiança na comunicação criptografada.</p>",
        "observation": "<ul><li><p>Confidencialidade: Possibilidade de ataques man-in-the-middle, permitindo leitura de dados sensíveis.</p></li></ul>",
        "remediation": "<p>Instalar um certificado válido emitido por uma autoridade de certificação confiável e garantir a configuração correta no servidor.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/295.html"
        ],
        "locale": "en",
        "title": "SSL/TLS Certificate Name Mismatch",
        "vulnType": "OWASP WSTG",
        "description": "<p>O certificado SSL/TLS do servidor não corresponde ao nome do host da aplicação acessada. Isso pode indicar configuração incorreta ou até mesmo tentativa de ataque man-in-the-middle.</p>",
        "observation": "<ul><li><p>Confidencialidade: Atacantes podem explorar a falta de correspondência para interceptar dados sensíveis.</p></li></ul>",
        "remediation": "<p>Emitir e configurar corretamente um certificado SSL/TLS válido para o domínio específico da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/319.html"
        ],
        "locale": "en",
        "title": "Transmission of Sensitive Information Via Unencrypted Channels",
        "vulnType": "OWASP WSTG",
        "description": "<p>Informações sensíveis, como credenciais de login, dados pessoais ou financeiros, estão sendo transmitidas por canais não criptografados (ex.: HTTP ou protocolos legados). Isso expõe os dados a interceptação por atacantes.</p>",
        "observation": "<ul><li><p>Confidencialidade: Dados sensíveis podem ser lidos por atacantes durante o trânsito.</p></li></ul>",
        "remediation": "<p>Configurar a aplicação e o servidor para transmitir informações sensíveis apenas por canais criptografados, preferencialmente HTTPS com TLS 1.2 ou superior.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/523.html"
        ],
        "locale": "en",
        "title": "Sensitive Information Sent Via GET Method",
        "vulnType": "OWASP WSTG",
        "description": "<p>A aplicação transmite informações sensíveis (como credenciais ou tokens de sessão) através do método GET em parâmetros de URL. Isso é inseguro, pois tais dados podem ser registrados em históricos de navegação, caches, logs de servidor ou até mesmo expostos em referers.</p>",
        "observation": "<ul><li><p>Confidencialidade: Dados sensíveis podem ser expostos acidentalmente em diversos locais de armazenamento.</p></li></ul>",
        "remediation": "<p>Evitar o envio de informações sensíveis pelo método GET. Utilizar POST ou cabeçalhos de autorização apropriados em conexões criptografadas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/523.html"
        ],
        "locale": "en",
        "title": "Sensitive Information in URL",
        "vulnType": "OWASP WSTG",
        "description": "<p>A aplicação expõe informações sensíveis diretamente na URL (ex.: parâmetros contendo tokens de autenticação, IDs de sessão, credenciais). Isso aumenta o risco de vazamento, já que URLs podem ser registradas em logs, caches, históricos e encaminhadas em cabeçalhos referer.</p>",
        "observation": "<ul><li><p>Confidencialidade: Dados sensíveis podem ser acessados por terceiros não autorizados.</p></li></ul>",
        "remediation": "<p>Evitar incluir dados sensíveis em URLs. Utilizar métodos seguros de transmissão, como POST com TLS, ou armazenar tokens de sessão em cookies protegidos.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'sitemap.xml' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um desenvolvedor ou organização pode fornecer detalhes sobre os recursos disponíveis na aplicação e suas conexões no arquivo \"sitemap.xml\".</p><p>O arquivo \"sitemap.xml\" pode conter recursos sensíveis que podem ser usados por um atacante para lançar ataques mais avançados e precisos utilizando os dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"sitemap.xml\" quaisquer dados sensíveis que não sejam necessários para o funcionamento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'security.txt' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um padrão proposto permite que páginas web especifiquem políticas de segurança e informações de contato no arquivo \"security.txt\".</p><p>O arquivo \"security.txt\" pode conter informações sensíveis que poderiam ser usadas por um atacante para lançar ataques mais sofisticados e direcionados utilizando os dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"security.txt\" todos os dados privados que não sejam necessários para o desenvolvimento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the 'humans.txt' File",
        "vulnType": "OWASP WSTG",
        "description": "<p>O arquivo \"humans.txt\" é um projeto para compartilhar informações sobre as pessoas que criam um site.</p><p>Esse arquivo pode conter informações sensíveis que poderiam ser utilizadas por um atacante para realizar ataques mais sofisticados e precisos com base nos dados coletados.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É recomendado remover do arquivo \"humans.txt\" todos os dados privados que não sejam necessários para o desenvolvimento da aplicação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/540.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the Source Code",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa situação ocorre quando a análise de um arquivo enviado para o servidor web revela informações relacionadas ao servidor que podem ser usadas para planejar novos ataques, como o tipo e versão das aplicações em uso, componentes ou extensões, credenciais etc.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Para evitar vazamento de informações sensíveis, o código-fonte HTML enviado pelo servidor deve ser revisado e modificado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/497.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information Because Debug Mode Is Enabled",
        "vulnType": "OWASP WSTG",
        "description": "<p>Em alguns casos, é possível exibir dados técnicos ou informações confidenciais da aplicação ao ativar o parâmetro de debug. Isso amplia a superfície de ataque ao revelar detalhes sobre o funcionamento interno da aplicação. Em algumas versões antigas de frameworks, a flag de debug pode até permitir ataques de execução de código.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Aplicações em produção nunca devem gerar informações internas como rastreamentos de pilha e mensagens de erro, a menos que sejam gravadas diretamente em logs inacessíveis ao usuário final. Todas as mensagens de erro devem ser codificadas em entidades HTML antes de serem gravadas no log, prevenindo ataques de XSS contra visualizadores de log.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information (generic)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma senha, por exemplo, é uma informação sensível que pode ter valor por si só ou ser utilizada para lançar outros ataques mais graves (como explorar mensagens de erro descontroladas). O conteúdo de mensagens de erro pode ser usado por um atacante para apoiar a execução de ataques mais direcionados. Uma tentativa de explorar falhas de enumeração de diretórios ou path traversal, por exemplo, pode revelar o caminho completo da aplicação instalada.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Crie áreas “seguras” dentro do sistema onde limites de confiança possam ser claramente definidos. Não permita que informações sensíveis atravessem essas fronteiras, e tenha extremo cuidado ao interagir com compartimentos externos a essas áreas seguras.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://cwe.mitre.org/data/definitions/359.html"
        ],
        "locale": "en",
        "title": "Disclosure of Credentials (credentials Leak)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Foi possível verificar a existência de arquivos contendo informações sensíveis, como credenciais válidas para acessar outros sistemas, em diversos endpoints. Não há necessidade de cookies ou autenticação prévia para acessar essas credenciais.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Independentemente do software em que essas credenciais são utilizadas, nunca é recomendado expor arquivos que contenham credenciais de usuários.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/798.html"
        ],
        "locale": "en",
        "title": "Use of Hard-coded Credentials",
        "vulnType": "OWASP WSTG",
        "description": "<p>O software possui credenciais embutidas de forma fixa (hard-coded), como senhas ou chaves criptográficas, utilizadas para criptografia interna de dados, comunicação com componentes externos ou autenticação de entrada. Esse tipo de prática cria uma grande falha de segurança que pode permitir que um atacante contorne os mecanismos de autenticação configurados pelo administrador.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Bypass de Mecanismo de Proteção: Se senhas fixas forem utilizadas, é quase certo que usuários maliciosos terão acesso à conta em questão.</p></li><li><p>Controle de Acesso: Execução de Código ou Comandos Não Autorizados: Essa fraqueza pode expor recursos ou funcionalidades para atores indevidos, possibilitando desde o acesso a informações sensíveis até a execução arbitrária de código.</p></li></ul>",
        "remediation": "<p>Em vez de credenciais estáticas, utilize tokens de sessão ou mecanismos dinâmicos de autenticação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://capec.mitre.org/data/definitions/118.html"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in the Metadata of Files Available in the Application",
        "vulnType": "OWASP WSTG",
        "description": "<p>O termo “metadados” refere-se a informações de natureza descritiva associadas a um documento. Também podem incluir informações administrativas e de gerenciamento.</p><p>Esses metadados enriquecem as informações às quais estão vinculados, facilitando a interpretação por sistemas e melhorando a recuperação de documentos. Contudo, já foram identificados casos em que metadados revelaram informações sensíveis utilizadas em ataques.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É recomendado que todos os arquivos disponibilizados na aplicação tenham seus metadados removidos antes de serem publicados em rede.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information in Default Content",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa vulnerabilidade ocorre quando arquivos padrão permanecem acessíveis após a instalação de um serviço ou aplicação. Esses arquivos podem expor informações como tipo e versão do servidor web utilizado, o que representa risco de segurança.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É necessário remover todos os arquivos padrão que não sejam essenciais para a operação do servidor, incluindo páginas padrão instaladas junto com o serviço.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/538.html",
          "https://www.owasp.org/index.php/Full_Path_Disclosure"
        ],
        "locale": "en",
        "title": "Disclosure of Internal Server Paths and Directories",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa vulnerabilidade ocorre quando o caminho absoluto de um servidor web ou de uma aplicação nele hospedada pode ser determinado por algum mecanismo, como mensagens de erro ou rastreamento de parâmetros enviados.</p><p>Dessa forma, é possível descobrir o diretório absoluto do servidor onde o conteúdo web está armazenado.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>A correção varia conforme a causa da exposição. Se foi obtido via mensagem de erro, recomenda-se substituir essas mensagens por respostas genéricas que apenas indiquem falha, sem detalhes técnicos. Se o caminho foi exposto via parâmetro de aplicação, deve-se alterar a lógica para exibir apenas caminhos relativos ou ocultá-los completamente.</p><p>Em todos os casos, recomenda-se substituir mensagens de erro do servidor por mensagens genéricas configuradas em arquivos de configuração.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/548.html"
        ],
        "locale": "en",
        "title": "Directory Listing",
        "vulnType": "OWASP WSTG",
        "description": "<p>O recurso de listagem de diretórios, quando habilitado, faz com que o servidor web exiba o conteúdo de um diretório quando não há um arquivo índice (ex.: index.php, index.html). Isso pode expor arquivos e informações que auxiliam atacantes em novos vetores de ataque, como XSS. Embora útil em ambientes de desenvolvimento, não é prática recomendada em produção.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Arquivos ou Diretórios: A exposição de diretórios pode permitir que um atacante acesse código-fonte ou obtenha informações úteis para exploração, como datas de criação de arquivos ou padrões em nomes de arquivos. Também pode expor dados privados ou confidenciais.</p></li></ul>",
        "remediation": "<p>Configurar corretamente o servidor web (NGINX, Apache, IIS) para não permitir listagem de diretórios ou navegação pelos caminhos. Por exemplo, no Apache pode-se criar um arquivo .htaccess no diretório da aplicação desabilitando a listagem:</p><p><Directory /{SEU_DIRETORIO}>Options FollowSymLinks</Directory></p><p>No httpd.conf, remover ou substituir as diretivas Indexes e MultiViews.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/311.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
          "https://wiki.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)"
        ],
        "locale": "en",
        "title": "Absence of SSL/TLS Encryption",
        "vulnType": "OWASP WSTG",
        "description": "<p>O servidor está sendo acessado via HTTP em vez de HTTPS. Isso permite que dados trafeguem sem criptografia, possibilitando interceptação e manipulação por atacantes. O protocolo HTTPS, utilizando TLS, garante a proteção e autenticação do servidor através de certificados digitais válidos.</p><p>Vulnerabilidades históricas em SSL/TLS e suas implementações reforçam a necessidade de configurar e validar corretamente o uso seguro de TLS.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: Um atacante pode descriptografar os dados via ataques de força bruta.</p></li></ul>",
        "remediation": "<p>O servidor web deve ser configurado para suportar HTTPS. Também é recomendado utilizar cabeçalho HSTS e redirecionar automaticamente todas as requisições HTTP para HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/319.html",
          "https://capec.mitre.org/data/definitions/117.html"
        ],
        "locale": "en",
        "title": "Mixed Content",
        "vulnType": "OWASP WSTG",
        "description": "<p>A aplicação está sendo carregada em HTTPS, mas alguns recursos ainda são buscados em HTTP. Isso permite que esses conteúdos sejam interceptados ou modificados por atacantes, comprometendo a segurança da sessão.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis.</p></li></ul>",
        "remediation": "<p>Configurar o servidor web para suportar apenas HTTPS, utilizar cabeçalho HSTS e garantir que todos os recursos sejam carregados exclusivamente via HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/310.html",
          "https://cwe.mitre.org/data/definitions/327.html"
        ],
        "locale": "en",
        "title": "Weak Encryption Algorithms",
        "vulnType": "OWASP WSTG",
        "description": "<p>O servidor web está configurado para aceitar algoritmos de criptografia considerados fracos ou obsoletos no serviço SSL/TLS, tornando a comunicação entre cliente e servidor insegura.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis.</p></li><li><p>Controle de Acesso: Modificar Dados da Aplicação: Um atacante pode enganar o usuário a realizar ações ocultas, como alterar configurações de privacidade.</p></li></ul>",
        "remediation": "<p>Permitir apenas conexões TLS utilizando algoritmos de criptografia seguros nas versões 1.2 ou 1.3.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "locale": "en",
        "title": "Use of Obsolete SSL/TLS Protocol Versions",
        "vulnType": "OWASP WSTG",
        "description": "<p>Para evitar que um atacante intercepte ou altere dados transmitidos entre cliente e servidor, é necessário usar criptografia forte. O HTTPS substitui o antigo SSL pelo TLS, que garante autenticidade e segurança por meio de certificados digitais confiáveis. O uso de versões antigas e obsoletas de SSL/TLS representa risco de segurança.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de acessar informações sensíveis.</p></li></ul>",
        "remediation": "<p>Desabilitar no servidor web todas as versões inseguras do protocolo SSL/TLS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
        ],
        "locale": "en",
        "title": "Secure Client-initiated Renegotiation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Durante a negociação de conexões SSL/TLS, o servidor consome mais recursos que o cliente. Se o servidor permitir que o cliente solicite renegociação da conexão, um atacante pode abusar desse recurso enviando múltiplas requisições, consumindo recursos e potencialmente causando negação de serviço (DoS).</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de acessar informações sensíveis.</p></li></ul>",
        "remediation": "<p>Aplicar os patches mais recentes. Em sistemas que utilizam OpenSSL, atualizar para a versão 0.9.8l ou superior. Como mitigação, também é possível desabilitar a renegociação iniciada pelo cliente sem a necessidade de atualização.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Untrusted Digital Certificate",
        "vulnType": "OWASP WSTG",
        "description": "<p>O certificado digital do servidor é considerado inseguro ou não confiável devido a parâmetros incorretos. Isso aumenta o risco de quebra de confidencialidade e confiabilidade do sistema.</p>",
        "observation": "<ul><li><p>Outros: Impacto Técnico: Varia conforme o contexto.</p></li></ul>",
        "remediation": "<p>Emitir e instalar um certificado digital confiável, reconhecido por navegadores (emitido por uma autoridade certificadora válida, dentro do prazo de validade e com o nome comum igual ao domínio do site).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/299.html"
        ],
        "locale": "en",
        "title": "Improper Check for Certificate Revocation (OCSP Stapling)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando uma autoridade certificadora perde confiança, os certificados emitidos por ela precisam ser revogados rapidamente para evitar ataques Man-in-the-Middle. A ausência de verificação apropriada pode permitir que certificados comprometidos continuem sendo aceitos.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Assumir Identidade: A confiança pode ser atribuída a uma entidade que não é quem afirma ser.</p></li><li><p>Outros: Dados de uma fonte não confiável (e possivelmente maliciosa) podem ser integrados.</p></li><li><p>Confidencialidade: Dados podem ser expostos a uma entidade que se passa por legítima.</p></li></ul>",
        "remediation": "<p>Implementar corretamente o processo de revogação via CRL (Certificate Revocation List) ou OCSP. Garantir acesso rápido às informações de certificados revogados para evitar que certificados comprometidos sejam aceitos.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/299.html"
        ],
        "locale": "en",
        "title": "CA Certificates",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma Autoridade Certificadora (CA) é responsável por emitir certificados digitais que validam a posse de chaves públicas. Caso uma CA falhe ou seja revogada, os certificados emitidos por ela tornam-se não confiáveis. Além disso, certificados autoassinados, que não passam por validação externa, também podem resultar em conexões TLS não confiáveis.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Assumir Identidade: Pode ser atribuída confiança a uma entidade maliciosa.</p></li><li><p>Outros: Dados de uma fonte não confiável podem ser integrados.</p></li><li><p>Confidencialidade: Dados podem ser expostos a uma entidade falsa.</p></li></ul>",
        "remediation": "<p>Instalar no servidor um certificado confiável emitido por uma autoridade certificadora de confiança.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/306.html"
        ],
        "locale": "en",
        "title": "Ensure Overall Security",
        "vulnType": "OWASP WSTG",
        "description": "<p>O mecanismo principal de autenticação geralmente recebe bastante atenção no desenvolvimento e costuma ser bem fortalecido. No entanto, isso nem sempre ocorre com mecanismos secundários, como funcionalidades de recuperação de senha ou rotas alternativas que podem permitir autenticação bem-sucedida na aplicação.</p>",
        "observation": "<ul><li><p>Outros: Expor funcionalidades críticas pode conceder a um atacante o mesmo nível de privilégio dessas funções. As consequências variam desde leitura ou modificação de dados sensíveis até execução arbitrária de código.</p></li></ul>",
        "remediation": "<p>Certifique-se de que todos os recursos de autenticação secundária (como atualização de perfil, esqueci a senha, token perdido/desativado, help desk ou IVR) sejam tão seguros quanto o mecanismo principal de autenticação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "locale": "en",
        "title": "Outdated OS Version (known Associated Vulnerabilities)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa vulnerabilidade ocorre quando a versão do sistema operacional do servidor pode ser identificada. Uma vez conhecida, é possível planejar ataques direcionados a falhas já documentadas para essa versão.</p>",
        "observation": "<ul><li><p>Outros: Degradação de Qualidade: O atacante está explorando uma versão desatualizada e não mantida.</p></li></ul>",
        "remediation": "<p>Recomenda-se atualizar o sistema operacional para a versão mais recente disponível.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "locale": "en",
        "title": "Outdated Dependencies and Libraries",
        "vulnType": "OWASP WSTG",
        "description": "<p>Pesquisadores de segurança publicam vulnerabilidades descobertas em bibliotecas, frameworks, módulos e sistemas operacionais na lista CVE. Essa base é pública e pode ser usada por atacantes para explorar aplicações desatualizadas.</p>",
        "observation": "<ul><li><p>Outros: Redução de Manutenibilidade: O atacante pode identificar vulnerabilidades em componentes desatualizados e explorá-los em novos vetores de ataque.</p></li></ul>",
        "remediation": "<p>Mantenha sempre as bibliotecas e dependências atualizadas com as versões mais recentes fornecidas pelo fabricante. Utilize ferramentas como o OWASP Dependency-Check no ciclo de vida da aplicação para identificar CVEs em dependências utilizadas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Identification of Management Panels",
        "vulnType": "OWASP WSTG",
        "description": "<p>Painéis de administração ou autenticação de aplicações não devem estar expostos publicamente na internet. O acesso a essas interfaces deve ser restrito, preferencialmente por meio de VPNs.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode obter informações sensíveis.</p></li></ul>",
        "remediation": "<p>Restringir o acesso a painéis de administração/autenticação exclusivamente por VPNs, evitando a exposição direta à Internet.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Server Configuration Not Hardened",
        "vulnType": "OWASP WSTG",
        "description": "<p>Qualquer parte da pilha da aplicação (serviços de rede, plataforma, servidor web, banco de dados, frameworks, código customizado, VMs ou containers) pode sofrer com falhas de configuração insegura. Essas falhas podem permitir acessos indevidos e, em casos graves, comprometer todo o sistema.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode obter informações sensíveis.</p></li></ul>",
        "remediation": "<p>Adotar processos de instalação segura, como:</p><ul><li><p>Automatizar um processo de hardening repetível para todos os ambientes (dev, QA e produção).</p></li><li><p>Instalar apenas componentes necessários, removendo recursos não utilizados.</p></li><li><p>Revisar e aplicar patches, updates e configurações recomendadas pelo fabricante.</p></li><li><p>Segregar ambientes com arquiteturas segmentadas ou uso de containers.</p></li><li><p>Enviar cabeçalhos de segurança ao cliente.</p></li><li><p>Verificar periodicamente a efetividade das configurações aplicadas.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration",
          "https://cwe.mitre.org/data/definitions/532.html"
        ],
        "locale": "en",
        "title": "Sensitive Information in Accessible Logs",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um log é um registro das atividades que ocorrem dentro das redes e sistemas de uma organização. Logs são compostos por entradas de log, e cada entrada contém detalhes sobre um evento específico que ocorreu em um sistema ou rede.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>É recomendado manter os logs em um local separado e não no próprio servidor web. Isso também facilita a agregação de logs de diferentes fontes que se referem à mesma aplicação (como em um farm de servidores web) e facilita a análise de logs (que pode ser intensiva em CPU) sem impactar o servidor.</p><p>Também é recomendado implementar rotação de logs garantindo que:</p><ul><li><p>Os logs sejam mantidos pelo tempo definido na política de segurança, nem mais nem menos.</p></li><li><p>Os logs sejam comprimidos após a rotação (isso é conveniente, pois permitirá armazenar mais logs no mesmo espaço de disco).</p></li><li><p>As permissões do sistema de arquivos dos arquivos de log rotacionados sejam as mesmas (ou mais restritivas) do que as dos arquivos de log originais. Por exemplo, servidores web precisam escrever nos logs que usam, mas não precisam escrever nos logs já rotacionados, permitindo que as permissões sejam alteradas no momento da rotação para evitar modificações pelo processo do servidor web.</p></li><li><p>Alguns servidores podem rotacionar os logs quando atingem certo tamanho. Caso isso aconteça, garanta que um atacante não possa forçar a rotação de logs para esconder seus rastros.</p></li></ul><p>Por fim, implemente controle de acesso para que as informações dos logs nunca sejam visíveis para usuários finais e analise os logs periodicamente, por exemplo, com base em mensagens de erro:</p><ul><li><p>Mensagens de erro 40x (não encontrado). Um grande número vindo da mesma origem pode indicar o uso de ferramentas de varredura CGI contra o servidor web.</p></li><li><p>Mensagens 50x (erro do servidor). Podem indicar que um atacante está explorando partes da aplicação que falham inesperadamente. Por exemplo, estágios iniciais de ataques de injeção SQL podem gerar essas mensagens quando a query não está bem construída.</p></li></ul><p>Estatísticas ou análises de logs não devem ser geradas, nem armazenadas, no mesmo servidor que produz os logs. Caso contrário, um atacante pode, através de vulnerabilidade ou configuração incorreta do servidor web, acessá-los e obter informações semelhantes às reveladas pelos próprios arquivos de log.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://cwe.mitre.org/data/definitions/530.html"
        ],
        "locale": "en",
        "title": "Backup File Identification",
        "vulnType": "OWASP WSTG",
        "description": "<p>Arquivos não relacionados à aplicação, mas criados como resultado da edição de arquivos, backups em uso ou arquivos desatualizados deixados no diretório web, são uma fonte significativa de vulnerabilidade. Edições em produção ou tarefas administrativas podem deixar cópias de backup criadas automaticamente pelo editor ou pelo administrador ao comprimir arquivos para backup.</p><p>Arquivos editados podem deixar cópias automáticas do tipo .bak, .sav, .old ou ~. O servidor web geralmente não possui interpretação definida para esses arquivos, resultando na exibição de seu conteúdo ou no download.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Para remover o risco, é necessário excluir o arquivo de backup descoberto. Rotineiramente deve-se procurar no servidor por arquivos com extensões .bak, .bac, .sav, .old, .BAK, .BAC, .SAV, .OLD, .tar, .gz e .tgz e removê-los para mitigar esse problema. Recomenda-se também configurar o servidor web para compreender essas extensões a fim de evitar exibição ou download de seu conteúdo. Caso o diretório raiz esteja em um sistema de arquivos com snapshots, estes não devem ser acessíveis via web. Configure o servidor web para negar acesso a tais diretórios. Exemplo no Apache:</p><p><Location ~ \".snapshot\">Order deny,allowDeny from all</Location></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Insecure HTTP Methods Enabled",
        "vulnType": "OWASP WSTG",
        "description": "<p>O HTTP possui diversos métodos que permitem operações no servidor web. Embora GET e POST sejam os mais usados, outros métodos menos conhecidos também são suportados. Se o servidor estiver configurado incorretamente, alguns deles podem ser usados de forma maliciosa.</p>",
        "observation": "<ul><li><p>Outros: Impacto Técnico: Varia de acordo com o contexto</p></li></ul>",
        "remediation": "<p>Os métodos considerados desnecessários na configuração do servidor devem ser desativados.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Lack of Security HTTP Headers",
        "vulnType": "OWASP WSTG",
        "description": "<p>Cabeçalhos de segurança são implementados como cabeçalhos HTTP de resposta que instruem o navegador sobre como se comportar em situações específicas, reduzindo o risco de exploração de vulnerabilidades no cliente. A configuração de segurança completa necessária para estabelecer uma conexão segura com o cliente não está presente nas respostas do servidor.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso para dados ou funcionalidades específicas do usuário podem ser contornadas.</p></li></ul>",
        "remediation": "<p>É recomendada a implementação de todos os cabeçalhos de segurança HTTP nas respostas do servidor. Valores recomendados:</p><ul><li><p>Strict-Transport-Security (HSTS): max-age=31536000; includeSubDomains.</p></li><li><p>Content-Security-Policy: default-src https: 'self'.</p></li><li><p>X-XSS-Protection:1</p></li><li><p>X-Frame-Options: 'DENY' (se não for possível, 'SAMEORIGIN').</p></li><li><p>X-Content-Type-Options: nosniff.</p></li><li><p>Cache-Control: no-store.</p></li><li><p>Referrer-Policy: 'no-referrer' (ou 'same-origin').</p></li><li><p>Permissions-Policy: Defina as funções mínimas permitidas e negue as demais.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of HSTS (HTTP Strict Transport Security) Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>O cabeçalho HTTP \"Strict-Transport-Security\" (HSTS) é usado para impedir tentativas de interceptação de comunicações, cookies, etc. Esse mecanismo permite que um servidor web declare que apenas conexões HTTP seguras (sobre TLS/SSL) são permitidas para comunicação do navegador.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: Um atacante pode obter acesso não autorizado ao sistema recuperando credenciais de autenticação de um usuário legítimo.</p></li></ul>",
        "remediation": "<p>Defina o cabeçalho HTTP Strict-Transport-Security, que instrui o navegador do cliente a redirecionar automaticamente solicitações recebidas via HTTP para o protocolo seguro HTTPS, em vez de usar ou forçar um protocolo inseguro.</p><p><Strict-Transport-Security: max-age=60000; includeSubDomains></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of X-frame-options Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um usuário é induzido a usar funcionalidades em um site oculto ao clicar em outro conteúdo em um site falso explorando a vulnerabilidade de Clickjacking. A técnica consiste em incorporar um botão ou link invisível (por exemplo, dentro de um iframe) sobreposto a uma página web legítima. O iframe cobre o conteúdo esperado pelo usuário.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: Um atacante pode obter privilégios modificando ou lendo dados críticos diretamente, ou acessando funcionalidades privilegiadas insuficientemente protegidas.</p></li></ul>",
        "remediation": "<p>O cabeçalho X-Frame-Options é suportado pela maioria dos navegadores modernos. É recomendável configurar o servidor web para habilitar esse cabeçalho em todas as páginas. Caso a página deva conter apenas código do próprio servidor, utilize a opção SAMEORIGIN.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Content Security Policy (CSP) Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>O cabeçalho HTTP Content-Security-Policy aumenta a segurança ao limitar os recursos que o navegador pode carregar, como JavaScript, CSS e outros.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: Um atacante pode obter privilégios modificando ou lendo dados críticos, ou acessando funcionalidades privilegiadas insuficientemente protegidas.</p></li><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li><li><p>Confidencialidade: Ler Dados da Aplicação: Dados podem ser expostos a uma entidade que se passa por confiável, resultando em vazamento de informações.</p></li><li><p>Controle de Acesso: Modificar Dados da Aplicação: Um atacante pode induzir o usuário a executar ações ocultas (clickjacking). O impacto varia conforme a aplicação. Exemplo: em uma rede social, isso poderia alterar configurações de privacidade.</p></li></ul>",
        "remediation": "<p>Ative o CSP incluindo o cabeçalho Content-Security-Policy nas respostas HTTP, instruindo o navegador a aplicar as políticas definidas.</p><p>Exemplo: Content-Security-Policy: script-src https://example.com:*;&gt;</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Cache Control Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>O cabeçalho HTTP Cache-Control especifica diretivas para mecanismos de cache.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Crie um cabeçalho Cache-Control no servidor web com as diretivas necessárias. Caso a página contenha informações sensíveis, use: Pragma: no-cache e Cache-Control: no-cache, no-store.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Pragma Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>O cabeçalho Pragma é específico de implementação e pode impactar a cadeia de requisição-resposta. Quando o cabeçalho HTTP/1.1 Cache-Control não está presente, ele é usado para compatibilidade retroativa com caches HTTP/1.0.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Quando o servidor utiliza HTTP/1.1 ou superior, deve-se preferir o uso de Cache-Control para definir políticas de cache. O cabeçalho Pragma pode ser removido.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Feature Policy Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>O cabeçalho Feature-Policy permite que desenvolvedores habilitem, desabilitem ou alterem o comportamento de APIs e recursos específicos do navegador. Nota: esse cabeçalho foi substituído por Permissions-Policy e Document-Policy, e será considerado obsoleto no futuro.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Exemplo de configuração do cabeçalho Feature-Policy em respostas do servidor:</p><p><Feature-Policy: vibrate 'self'; usermedia *; sync-xhr 'self' https://example.com></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/116.html"
        ],
        "locale": "en",
        "title": "Absence of Referrer Policy Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Requisições feitas a partir de um documento ou ao navegar para fora dele são associadas ao cabeçalho Referer. Embora o cabeçalho possa ser suprimido com o atributo <code>noreferrer</code>, autores podem desejar controlar diretamente esse comportamento por motivos de privacidade e segurança.</p><ul><li><p>Privacidade: por exemplo, uma rede social pode não querer expor a URL do perfil de um usuário ao site de destino ao seguir links externos.</p></li><li><p>Segurança: uma aplicação web que usa HTTPS e identificadores de sessão na URL pode querer evitar que esses identificadores vazem pelo cabeçalho Referer ao acessar outros sites.</p></li></ul><p>Existem outros cenários de vazamento de URLs de capacidade que não são mitigados apenas pelo controle do Referer.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>O cabeçalho HTTP Referrer-Policy define quanto dos dados do referenciador deve ser incluído nas requisições. Recomenda-se configurar valores como:</p><p>Referrer-Policy: no-referrer</p><p>Referrer-Policy: same-origin</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/116.html"
        ],
        "locale": "en",
        "title": "Absence of X-content-type-options Header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Certos callbacks de API precisam ter cabeçalhos de segurança corretamente configurados para proteger contra ataques como Reflective File Download e injeções diversas.</p><p>Também é necessário verificar se entradas de usuários são refletidas na resposta da API e, caso sejam dinâmicas, validar e codificá-las para evitar XSS e ataques de execução de métodos de mesma origem.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Sanitize a entrada da API; escapar caracteres não é suficiente — apenas valores alfanuméricos devem ser permitidos. Garanta que o cabeçalho <code>X-Content-Type-Options</code> esteja presente em todas as respostas da API com valor <code>nosniff</code>, para impedir que o navegador interprete arquivos como outro tipo de conteúdo.</p><p>Adicione também:</p><p>Content-Disposition: attachment; filename=\"filename.extension\"</p><p>com a extensão correspondente ao tipo de arquivo, em APIs cujo retorno não será renderizado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/524.html"
        ],
        "locale": "en",
        "title": "Anti-caching Header (server-side)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Cabeçalhos anti-cache impedem que dados sensíveis sejam armazenados em proxies reversos, balanceadores de carga e módulos de cache da aplicação. Quando não implementados corretamente, informações podem ser armazenadas e expostas. Exemplos de má configuração:</p><p>Cache-Control: max-age=315360000, public (qualquer cache pode armazenar)</p><p>Cache-Control: private (navegadores podem armazenar)</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis</p></li></ul>",
        "remediation": "<p>Essa vulnerabilidade pode ser reduzida configurando corretamente cabeçalhos anti-cache. Um exemplo apropriado seria:</p><p>Cache-Control: no-store</p><p>Pragma: no-cache (apenas para compatibilidade retroativa com clientes HTTP/1.0)</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/173.html"
        ],
        "locale": "en",
        "title": "Unsafe Content-type Header Within the Response",
        "vulnType": "OWASP WSTG",
        "description": "<p>Definir corretamente os cabeçalhos de conteúdo é essencial para reforçar a segurança das aplicações, reduzindo a exposição a ataques como drive-by download. Cabeçalhos incorretos podem permitir que navegadores, como o Internet Explorer, interpretem arquivos de forma incorreta, levando a falhas de segurança.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Exemplo de cabeçalhos Content-Type seguros:</p><p>Content-Type: text/html; charset=UTF-8</p><p>Content-Type: application/json;</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission",
          "https://cwe.mitre.org/data/definitions/732.html"
        ],
        "locale": "en",
        "title": "Excessive File and Directory Permissions",
        "vulnType": "OWASP WSTG",
        "description": "<p>Conceder permissões mais amplas do que o necessário a arquivos ou diretórios aumenta o risco de exposição de dados sensíveis ou modificação não autorizada. Isso é especialmente perigoso quando envolve configurações, execução de programas ou dados críticos de usuários.</p><p>Exemplos: arquivos executáveis acessíveis por usuários não autorizados, ou arquivos de configuração contendo credenciais/API tokens com permissões de leitura para todos.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: Código injetado pode acessar arquivos/dados restritos.</p></li><li><p>Confidencialidade: Ler Arquivos ou Diretórios: Um atacante pode acessar dados sensíveis de forma direta ou através de funcionalidades privilegiadas mal protegidas.</p></li></ul>",
        "remediation": "<p>Configure corretamente as permissões de arquivos e diretórios para prevenir acesso desnecessário a recursos críticos por usuários não autorizados.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/770.html"
        ],
        "locale": "en",
        "title": "Allocation of Resources Without Limits or Throttling",
        "vulnType": "OWASP WSTG",
        "description": "<p>Em violação da política de segurança esperada, o software aloca recursos reutilizáveis sem impor limites sobre a quantidade ou tamanho desses recursos. Isso pode permitir abuso ou indisponibilidade.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de Recursos: Ao alocar recursos sem limites, um atacante pode impedir que outros sistemas, aplicações ou processos acessem o mesmo tipo de recurso.</p></li></ul>",
        "remediation": "<p>Recomendações:</p><ul><li><p>Defina limites mínimos e máximos para alocação de recursos e especifique comportamentos aceitáveis quando os limites forem atingidos.</p></li><li><p>Projete mecanismos de limitação (throttling) na arquitetura para impedir que usuários não autorizados consumam recursos excessivamente.</p></li><li><p>Estabeleça limites por usuário, configuráveis pelo administrador.</p></li><li><p>Implemente autenticação forte e controle de acesso para prevenir abusos.</p></li><li><p>Valide entradas no lado servidor, mesmo que haja verificações no cliente, pois estas podem ser facilmente contornadas.</p></li><li><p>Considere monitorar a taxa de requisições e bloquear quando ultrapassar o limite definido.</p></li></ul><p>Na implementação, utilize sempre uma estratégia de validação de entrada positiva (lista de valores aceitos) e rejeite entradas inválidas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account",
          "https://cwe.mitre.org/data/definitions/203.html",
          "https://cwe.mitre.org/data/definitions/204.html",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Account (users) Enumeration",
        "vulnType": "OWASP WSTG",
        "description": "<p>Devido a erros de configuração ou decisões de design, aplicações web frequentemente indicam se um nome de usuário existe no sistema. Por exemplo, ao enviar credenciais incorretas, a mensagem de erro pode revelar se o problema é o usuário inexistente ou a senha incorreta. Um atacante pode usar essas informações para compilar listas de usuários e depois realizar ataques de força bruta ou com credenciais padrão.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler Dados da Aplicação: O atacante pode ser capaz de ler informações sensíveis.</p></li><li><p>Controle de Acesso: Mecanismo de Proteção Bypassado: Verificações de controle de acesso podem ser contornadas.</p></li></ul>",
        "remediation": "<p>Boas práticas para evitar essa vulnerabilidade incluem:</p><ul><li><p>Evitar o uso de dados públicos (alias, e-mail, etc.) como identificadores de login.</p></li><li><p>Durante o desenvolvimento, otimizar o processo de autenticação para não ter tempos de resposta diferentes conforme a existência do usuário.</p></li><li><p>Não exibir mensagens de erro que indiquem se o usuário existe ou não.</p></li><li><p>Manter comportamento uniforme da aplicação independentemente da existência do usuário.</p></li><li><p>Gerar identificadores de usuário de forma aleatória, nunca sequencial.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process",
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Insecure User Registration Process",
        "vulnType": "OWASP WSTG",
        "description": "<p>Algumas aplicações web automatizam (ou parcialmente automatizam) o processo de registro de usuários. Dependendo dos requisitos de segurança, a identificação necessária pode variar de nenhuma até identificação forte. Quando o processo não segue boas práticas, um atacante pode registrar contas maliciosas ou até controlar contas de outros usuários.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Executar Código ou Comandos Não Autorizados: Essa fraqueza pode expor recursos ou funcionalidades a atores indevidos, potencialmente permitindo acesso a informações sensíveis ou execução de código arbitrário.</p></li></ul>",
        "remediation": "<p>Implemente requisitos de identificação e verificação alinhados ao nível de segurança dos dados que estão sendo protegidos pelas credenciais.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/384.html"
        ],
        "locale": "en",
        "title": "The Login Functionality Should Always Generate a New Session Id",
        "vulnType": "OWASP WSTG",
        "description": "<p>A aplicação deve sempre gerar um novo cookie de sessão após autenticação bem-sucedida do usuário.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: A aplicação não invalida identificadores de sessão existentes, permitindo que um atacante roube sessões autenticadas.</p></li></ul>",
        "remediation": "<p>Após o login bem-sucedido, a aplicação deve gerar e usar um novo ID de sessão, prevenindo ataques de fixação de sessão. Em frameworks que não permitem regenerar IDs (ex.: .NET), pode-se adicionar um cookie aleatório extra com valor salvo em variável de sessão. Assim, a autenticação depende de mais de um token e o ataque de fixação é mitigado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy",
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Weaknesses in Password Policy",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma política de senhas fraca expõe toda a infraestrutura de segurança. Um atacante pode obter acesso apenas adivinhando senhas, sem explorar outras vulnerabilidades. Isso ocorre frequentemente em grandes organizações, onde contas administrativas recebem políticas menos rígidas que as de usuários comuns. Além disso, muitos serviços vêm com credenciais padrão (usuário/senha) que frequentemente não são alteradas.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: Senhas antigas aumentam a probabilidade de comprometimento.</p></li><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: Um atacante pode facilmente adivinhar senhas fracas e acessar contas.</p></li></ul>",
        "remediation": "<p>Implemente uma política de senhas fortes que exija:</p><ul><li><p>Comprimento mínimo de 8 caracteres, incluindo letras maiúsculas e minúsculas, números e caracteres especiais.</p></li><li><p>Uso de algoritmos de criptografia robustos (ex.: AES-128, SHA-256).</p></li><li><p>Proibição de senhas em branco.</p></li><li><p>Proibição de usar identificadores do usuário (ou partes deles) como senha.</p></li><li><p>Troca periódica obrigatória.</p></li><li><p>Impedir o reuso de senhas anteriores.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "(generic) Cross-site Scripting (XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>A vulnerabilidade \"Cross-Site Scripting (XSS)\" permite que terceiros injetem código JavaScript ou HTML em páginas web específicas da aplicação. Com isso, é possível roubar sessões de usuários, comprometer a segurança do sistema e obter informações sensíveis ou proprietárias da aplicação.</p><p>Essa vulnerabilidade geralmente ocorre devido à falha da aplicação em validar parâmetros de entrada e saída, o que acontece frequentemente em formulários.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: O ataque mais comum com cross-site scripting envolve a divulgação de informações armazenadas nos cookies do usuário. Normalmente, um usuário malicioso cria um script no lado do cliente que, quando interpretado pelo navegador, realiza alguma atividade (como enviar todos os cookies do site para um determinado endereço de e-mail). Esse script será carregado e executado por cada usuário que visitar o site. Como o site solicitando a execução do script tem acesso aos cookies em questão, o script malicioso também tem.</p></li><li><p>Disponibilidade: Executar Código ou Comandos Não Autorizados: Em algumas circunstâncias, pode ser possível executar código arbitrário no computador da vítima quando o cross-site scripting é combinado com outras falhas.</p></li><li><p>Controle de Acesso: Leitura de Dados da Aplicação: A consequência de um ataque XSS é a mesma, independentemente de ele ser armazenado ou refletido. A diferença está em como a carga útil chega ao servidor. XSS pode causar vários problemas para o usuário final, variando de incômodos a comprometimento completo da conta. Algumas vulnerabilidades de cross-site scripting podem ser exploradas para manipular ou roubar cookies, criar requisições que podem ser confundidas com as de um usuário válido, comprometer informações confidenciais ou executar código malicioso nos sistemas do usuário para fins maliciosos. Outros ataques prejudiciais incluem a divulgação de arquivos do usuário final, instalação de programas trojan, redirecionamento do usuário para outra página ou site, execução de controles \"Active X\" (no Microsoft Internet Explorer) de sites percebidos como confiáveis e modificação da apresentação de conteúdo.</p></li></ul>",
        "remediation": "<p>Todos os parâmetros que a aplicação gerencia precisam ser validados, especialmente quando se trata de dados fornecidos pelo usuário. Essa validação deve ser sempre realizada no lado do servidor e NUNCA depender de validações feitas no lado do cliente.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/159.html"
        ],
        "locale": "en",
        "title": "(generic) Failure to Sanitize Input",
        "vulnType": "OWASP WSTG",
        "description": "<p>O uso incorreto de elementos especiais na entrada controlada pelo usuário não é filtrado, removido, citado ou gerenciado corretamente pelo produto, o que pode impactar negativamente seu comportamento e integridade.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Falha, Saída ou Reinício: Validações no lado do cliente podem ser facilmente contornadas, permitindo que entradas malformadas ou inesperadas sejam aceitas pela aplicação, potencialmente como dados confiáveis. Isso pode levar a estados inesperados, comportamentos imprevisíveis e possivelmente a falhas.</p></li><li><p>Disponibilidade: Executar Código ou Comandos Não Autorizados: Um atacante pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de formas inesperadas, incluindo a execução arbitrária de comandos.</p></li></ul>",
        "remediation": "<p>Os desenvolvedores devem antecipar que elementos especiais podem ser injetados/removidos/manipulados nos vetores de entrada do sistema de software. Use uma combinação adequada de listas negras e listas brancas para garantir que apenas entradas válidas, esperadas e apropriadas sejam processadas pelo sistema.</p><ul><li><p>Assuma que toda entrada é maliciosa. Use uma estratégia de validação de entrada \"aceitar apenas valores conhecidos\", ou seja, utilize uma lista de entradas aceitáveis que estejam em estrita conformidade com as especificações. Rejeite qualquer entrada que não esteja em conformidade ou transforme-a em algo que esteja. Ao realizar validação de entradas, considere todas as propriedades potencialmente relevantes, incluindo tamanho, tipo de entrada, faixa completa de valores aceitáveis, entradas faltantes ou extras, sintaxe, consistência entre campos relacionados e conformidade com regras de negócio. Por exemplo, \"boat\" pode ser sintaticamente válido por conter apenas caracteres alfanuméricos, mas não é válido se a entrada esperar apenas cores como \"red\" ou \"blue\". Não dependa exclusivamente da busca por entradas maliciosas ou malformadas.</p></li><li><p>Embora seja arriscado usar strings de consulta, código ou comandos gerados dinamicamente que misturem controle e dados, às vezes isso é inevitável. Cite corretamente argumentos e escape caracteres especiais. A abordagem mais conservadora é escapar ou filtrar todos os caracteres que não passam em uma lista extremamente restritiva (como tudo que não seja alfanumérico ou espaço). Se alguns caracteres especiais ainda forem necessários, como espaço, envolva cada argumento em aspas após o escape/filtragem. Tenha cuidado com injeção de argumentos.</p></li><li><p>As entradas devem ser decodificadas e canonicalizadas para a representação interna atual da aplicação antes de serem validadas. Certifique-se de que a aplicação não decodifica a mesma entrada duas vezes. Erros desse tipo podem ser usados para contornar esquemas de validação de listas brancas.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://www.owasp.org/index.php/SQL_Injection"
        ],
        "locale": "en",
        "title": "(generic) SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Através do uso de injeção de código SQL (SQLi), é possível alterar a lógica das instruções SQL e permitir a execução de diferentes tipos de consultas ao banco de dados. Além de adicionar novos registros ou deletar/modificar registros existentes, é possível obter dados do banco que, em teoria, não deveriam estar acessíveis, como usuários, senhas, detalhes sobre a própria aplicação, etc. Se o usuário do banco de dados tiver mais permissões do que o necessário, pode ser possível acessar outros bancos ou até executar comandos do sistema. A causa raiz principal da injeção de código SQL (SQLi) é a validação inadequada dos parâmetros de entrada da aplicação.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: Como bancos de dados SQL geralmente contêm dados sensíveis, a perda de confidencialidade é um problema frequente em vulnerabilidades de injeção SQL.</p></li><li><p>Controle de Acesso: Contornar Mecanismo de Proteção: Se comandos SQL incorretos forem usados para verificar nomes de usuários e senhas, pode ser possível conectar-se ao sistema como outro usuário sem conhecimento prévio da senha.</p></li><li><p>Controle de Acesso: Contornar Mecanismo de Proteção: Se informações de autorização estiverem em um banco SQL, pode ser possível alterá-las por meio da exploração bem-sucedida de uma vulnerabilidade SQLi.</p></li><li><p>Integridade: Modificar Dados da Aplicação: Assim como é possível ler informações sensíveis, também é possível alterá-las ou até deletá-las com um ataque de injeção SQL.</p></li></ul>",
        "remediation": "<p>Valide os parâmetros que a aplicação gerencia, especialmente quando o usuário os envia como dados de entrada. Essa validação deve ser sempre realizada no lado do servidor e nunca depender de validações do lado do cliente.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/352.html"
        ],
        "locale": "en",
        "title": "Absence of Token Anti-csrf",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um ataque CSRF tem como objetivo enganar um usuário para executar, sem saber, funcionalidades em uma aplicação web vulnerável, beneficiando o atacante e prejudicando o usuário afetado.</p><p>Especificamente, o ataque é realizado forçando o navegador de um usuário desavisado a fazer uma requisição ao site vulnerável, requisição que o usuário realizará sem perceber, enquanto estiver logado no site, já que as credenciais já estabelecidas (ID de sessão, cookies, ...) serão usadas automaticamente.</p><p>Diferente dos ataques XSS, que exploram a confiança que um usuário tem em um site específico, o Cross Site Request Forgery explora a confiança que um site tem em um usuário específico. Trata-se de uma vulnerabilidade de autenticação insuficiente, na qual a aplicação não valida corretamente a origem da requisição.</p>",
        "observation": "<ul><li><p>Controle de Acesso: DoS: Falha, Saída ou Reinício: As consequências variarão dependendo da funcionalidade vulnerável ao CSRF. Um atacante poderia efetivamente realizar qualquer operação como se fosse a vítima. Se a vítima for um administrador ou usuário privilegiado, as consequências podem incluir obter controle total sobre a aplicação web — deletar ou roubar dados, desinstalar o produto ou usá-lo para lançar outros ataques contra todos os usuários do produto. Como o atacante possui a identidade da vítima, o alcance do CSRF é limitado apenas pelos privilégios da vítima.</p></li></ul>",
        "remediation": "<p>A aplicação deve ser atualizada para incluir suporte a tokens anti-CSRF em quaisquer formulários sensíveis acessíveis durante uma sessão autenticada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows"
        ],
        "locale": "en",
        "title": "Abuse of Application Logic Workflow.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Vulnerabilidades em workflows envolvem qualquer tipo de falha que permite a um atacante usar uma aplicação/sistema de forma que bypass (não siga) o fluxo de trabalho projetado/intencional.</p><p>Definição de workflow na Wikipedia:</p><p>Um workflow consiste em uma sequência de etapas conectadas, em que cada etapa segue sem atraso ou lacuna, terminando pouco antes da próxima etapa começar. É a representação de uma sequência de operações, declaradas como trabalho de uma pessoa ou grupo, organização de pessoal, ou um ou mais mecanismos simples ou complexos. Workflow pode ser visto como uma abstração do trabalho real.</p><p>A lógica de negócio da aplicação deve exigir que o usuário complete etapas específicas na ordem correta e, se o workflow for interrompido sem ser completado com sucesso, todas as ações geradas são \"\"desfeitas\"\" ou abortadas. Vulnerabilidades relacionadas ao bypass do fluxo de trabalho correto são únicas, pois são muito específicas da aplicação/sistema, exigindo casos de abuso manual cuidadosamente desenvolvidos usando os requisitos e casos de uso.</p><p>O processo de negócio da aplicação deve ter controles que garantam que as ações/transações do usuário sigam a ordem correta/aceitável, e se uma transação disparar algum tipo de ação, essa ação será \"\"desfeita\"\" e abortada caso a transação não seja concluída com sucesso.</p>",
        "observation": "<ul><li><p>Outros: Alterar Lógica de Execução: Um atacante poderia fazer com que o software pulasse etapas críticas ou as executasse na ordem incorreta, contornando a lógica de negócio pretendida. Isso pode, em alguns casos, ter implicações de segurança.</p></li></ul>",
        "remediation": "<p>A aplicação precisa de controles que garantam que os usuários completem cada etapa do workflow na ordem correta e impeçam que atacantes contornem, pulem ou reproduzam qualquer etapa do processo. Também precisa ser autônoma. Criar casos de abuso da lógica de negócio, com o objetivo de completar o processo sem seguir as etapas corretas, é como se realiza o teste de vulnerabilidades em workflows.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/285.html"
        ],
        "locale": "en",
        "title": "All Authentication Controls Must Fail Securely",
        "vulnType": "OWASP WSTG",
        "description": "<p>O tratamento seguro de erros é um componente crucial da programação segura. Dois erros, em particular, exigem atenção especial. A primeira categoria são exceções que surgem durante o processamento de um controle de segurança. É crucial que essas exceções não permitam ações que o mecanismo de proteção normalmente proibiria. Como desenvolvedor, deve-se ter em mente que um mecanismo de segurança geralmente possui três resultados possíveis:</p><ul><li><p>Permitir o procedimento.</p></li><li><p>Não permitir a operação.</p></li><li><p>Uma exceção. Em geral, o mecanismo de segurança deve ser construído de modo que uma falha tenha o mesmo efeito que desligar a operação.</p></li></ul>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Arquivos ou Diretórios: Um atacante poderia ler dados sensíveis, seja diretamente de um repositório de dados não protegido adequadamente, ou acessando funcionalidades privilegiadas insuficientemente protegidas.</p></li><li><p>Integridade: Modificação de Arquivos ou Diretórios: Um atacante poderia modificar dados sensíveis, seja escrevendo diretamente em um repositório de dados não protegido adequadamente, ou acessando funcionalidades privilegiadas insuficientemente protegidas.</p></li><li><p>Controle de Acesso: Ganhar Privilégios ou Assumir Identidade: Um atacante poderia obter privilégios modificando ou lendo dados críticos diretamente, ou acessando funcionalidades privilegiadas insuficientemente protegidas.</p></li></ul>",
        "remediation": "<p>Antes de usar qualquer sistema de controle de acesso em sua aplicação, certifique-se de que todos tenham passado por testes de segurança extensivos. Testes unitários completos são frequentemente feitos especificamente para esse propósito.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "https://cwe.mitre.org/data/definitions/613.html"
        ],
        "locale": "en",
        "title": "Application Cookies Have an Excessive or Indefinite Expiration Time.",
        "vulnType": "OWASP WSTG",
        "description": "<p>O atributo Expires é usado para:</p><ul><li><p>Definir cookies persistentes.</p></li><li><p>Limitar a duração se uma sessão durar muito.</p></li><li><p>Forçar a exclusão de um cookie configurando uma data no passado.</p></li></ul><p>Diferente dos cookies de sessão, os cookies persistentes serão usados pelo navegador até expirarem. Uma vez passada a data de expiração, o navegador excluirá o cookie.</p><p>A falta de expiração adequada da sessão pode aumentar a probabilidade de sucesso de certos ataques. Por exemplo, um atacante pode interceptar um ID de sessão, possivelmente por um sniffer de rede ou ataque Cross-site Scripting. Embora tempos curtos de expiração não ajudem se um token roubado for usado imediatamente, eles protegem contra a reprodução contínua do ID de sessão. Em outro cenário, um usuário pode acessar um site a partir de um computador compartilhado (como em biblioteca, lan house ou ambiente de trabalho aberto). Expiração insuficiente da sessão poderia permitir que um atacante usasse o botão de voltar do navegador para acessar páginas previamente visitadas pela vítima.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Bypass do Mecanismo de Proteção: Um atacante poderia permanecer logado por muito tempo, podendo reutilizar IDs antigos ou deletados e referências diretas.</p></li></ul>",
        "remediation": "<p>Somente cookies persistentes devem ser configurados usando o atributo Expires. No entanto, é crucial verificar se nenhum dado sensível está presente no cookie persistente. Por exemplo, se um cookie persistente for usado para armazenar informações necessárias para autenticação, um atacante com acesso a ele poderia provar sua identidade na aplicação.</p><p>Portanto, devemos garantir que um cookie contendo informações sensíveis não tenha o atributo 'Expires' configurado.</p><p>Além disso, é recomendável definir tempos de expiração curtos para reduzir a probabilidade de um possível atacante reutilizá-los.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Blind Boolean-based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>O atacante utiliza SQL injection baseado em boolean para enviar consultas ao banco de dados, forçando a aplicação a retornar um resultado diferente dependendo se a consulta retorna verdadeiro ou falso. O conteúdo da resposta HTTP pode mudar ou permanecer o mesmo conforme o resultado. Mesmo que nenhum dado seja retornado, isso permite ao atacante determinar se o resultado é verdadeiro ou falso.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: Como bancos de dados SQL geralmente armazenam dados sensíveis, a perda de confidencialidade é um problema frequente em vulnerabilidades de SQL injection.</p></li><li><p>Controle de Acesso: Bypass do Mecanismo de Proteção: Se comandos SQL pobres forem usados para verificar nomes de usuário e senhas, pode ser possível se conectar ao sistema como outro usuário sem conhecimento prévio da senha.</p></li><li><p>Controle de Acesso: Bypass do Mecanismo de Proteção: Se informações de autorização estiverem em um banco SQL, pode ser possível alterá-las explorando com sucesso a vulnerabilidade de SQL injection.</p></li><li><p>Integridade: Modificação de Dados da Aplicação: Assim como é possível ler dados sensíveis, também é possível alterá-los ou até deletá-los usando SQL injection.</p></li></ul>",
        "remediation": "<p>É aconselhável sanitizar os parâmetros de entrada da aplicação para impedir que atacantes introduzam caracteres que possam alterar a consulta SQL e obter informações indevidas.</p><p>A principal recomendação é implementar um sistema de \"Lista Branca\", aceitando apenas palavras e caracteres definidos, ignorando quaisquer outros antes de usá-los no banco. Se isso não for possível, pode-se usar uma \"Lista Negra\" para bloquear caracteres vulneráveis, como % #'\"\"\"\"'\"\"\"\" () +, ;, e palavras-chave SQL como \"select\", \"where\", \"union\", \"join\" e \"update\". Além disso, deve-se verificar variações de codificação desses caracteres, como URL encoding, unicode/UTF-8 e hexadecimal.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Blind Time-based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>O ataque SQL Injection (SQLi) tenta obter informações ou até executar comandos através dessa vulnerabilidade, interagindo inesperadamente com o banco de dados. Como neste caso se trata de um SQLi baseado em tempo, a resposta não fornece diretamente informações; o atacante precisa interpretar o tempo de resposta do servidor para obter os dados necessários.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados da Aplicação: Como bancos de dados SQL geralmente armazenam dados sensíveis, a perda de confidencialidade é um problema frequente em vulnerabilidades de SQL injection.</p></li><li><p>Controle de Acesso: Bypass do Mecanismo de Proteção: Se comandos SQL pobres forem usados para verificar nomes de usuário e senhas, pode ser possível se conectar ao sistema como outro usuário sem conhecimento prévio da senha.</p></li><li><p>Controle de Acesso: Bypass do Mecanismo de Proteção: Se informações de autorização estiverem em um banco SQL, pode ser possível alterá-las explorando com sucesso a vulnerabilidade de SQL injection.</p></li><li><p>Integridade: Modificação de Dados da Aplicação: Assim como é possível ler dados sensíveis, também é possível alterá-los ou até deletá-los usando SQL injection.</p></li></ul>",
        "remediation": "<p>É aconselhável sanitizar os parâmetros de entrada da aplicação para impedir que atacantes introduzam caracteres que possam alterar a consulta SQL e obter informações indevidas.</p><p>A principal recomendação é implementar um sistema de \"Lista Branca\", aceitando apenas palavras e caracteres definidos, ignorando quaisquer outros antes de usá-los no banco. Se isso não for possível, pode-se usar uma \"Lista Negra\" para bloquear caracteres vulneráveis, como % #'\"\"\"\"'\"\"\"\" () +, ;, e palavras-chave SQL como \"select\", \"where\", \"union\", \"join\" e \"update\". Além disso, deve-se verificar variações de codificação desses caracteres, como URL encoding, unicode/UTF-8 e hexadecimal.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection",
          "https://research.securitum.com/css-data-exfiltration-in-firefox-via-single-injection-point/",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "CSS Content Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Semelhante ao funcionamento das injeções de HTML ou XSS, as injeções de CSS permitem que hackers insiram código CSS no lado do cliente, que será interpretado pelo navegador da vítima ao acessar uma URL. Foi demonstrado que é possível extrair dados do DOM usando apenas CSS, apesar de este não ter o mesmo potencial que HTML ou JavaScript e ser capaz apenas de exportar estilos.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de recursos (memória): Um invasor pode fornecer valores inesperados e causar uma falha no programa ou consumo excessivo de recursos, como memória e CPU.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Um invasor pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de maneiras inesperadas, incluindo execução de comandos arbitrários.</p></li></ul>",
        "remediation": "<p>Esse tipo de ataque pode ser interrompido validando adequadamente os conteúdos que o servidor recebe e envia, ou higienizando corretamente a entrada do usuário.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/601.html",
          "https://portswigger.net/kb/issues/00500100_open-redirection-reflected"
        ],
        "locale": "en",
        "title": "Client-side URL Redirect (open Redirection)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma vulnerabilidade conhecida como Redirecionamento Aberto ocorre quando um programa incorpora inadvertidamente dados controláveis pelo usuário no destino de um redirecionamento. Dentro do aplicativo, um invasor pode criar uma URL que direciona o tráfego para qualquer domínio externo.</p>",
        "observation": "<ul><li><p>Controle de Acesso: Obter Privilégios ou Assumir Identidade: O usuário pode ser redirecionado para uma página não confiável que contém malware, o que pode comprometer a máquina do usuário. Isso o exporá a riscos extensos, e a interação do usuário com o servidor web também poderá ser comprometida se o malware realizar keylogging ou outros ataques que roubem credenciais, informações de identificação pessoal (PII) ou outros dados importantes.</p></li><li><p> Outros: O usuário pode ser alvo de ataques de phishing ao ser redirecionado para uma página não confiável. O ataque de phishing pode levar a uma página da web controlada pelo invasor que parece ser um site confiável. Os phishers podem então roubar as credenciais do usuário e usá-las para acessar o site legítimo.</p></li></ul>",
        "remediation": "<p>Ao desabilitar a função de redirecionamento ou manter uma lista do lado do servidor de todos os URLs permitidos para redirecionamento, os aplicativos devem, sempre que possível, evitar incorporar dados controláveis pelo usuário em destinos de redirecionamento.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
          "https://portswigger.net/web-security/os-command-injection",
          "https://cwe.mitre.org/data/definitions/77.html",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "locale": "en",
        "title": "Command Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Vulnerabilidades de injeção de comando geralmente ocorrem quando:</p><ol><li><p> Os dados entram no aplicativo de uma fonte não confiável.</p></li><li><p> Os dados são parte de uma string que é executada como um comando pelo aplicativo.</p></li><li><p> Ao executar o comando, o aplicativo concede ao invasor um privilégio ou capacidade que ele não teria de outra forma.</p></li></ol><p> Muitos protocolos e produtos possuem sua própria linguagem de comando personalizada. Embora strings de comando de shell ou de sistema operacional sejam frequentemente descobertas e alvos, os desenvolvedores podem não perceber que essas outras linguagens de comando também podem ser vulneráveis ​​a ataques.</p>",
        "observation": "<ul><li><p>Integridade: Executar códigos ou comandos não autorizados: Se um usuário mal-intencionado injetar um caractere (como ponto e vírgula) que delimita o fim de um comando e o início de outro, pode ser possível inserir um comando totalmente novo e não relacionado que não deveria ser executado.</p></li><li><p> Confidencialidade: Leitura de dados do aplicativo: O código injetado pode acessar dados/arquivos restritos.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar.</p></li><li><p> Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário.</p></li><li><p> Não repúdio: ocultar atividades: muitas vezes, as ações executadas pelo código de controle injetado não são registradas.</p></li></ul>",
        "remediation": "<p>É recomendável limitar ao máximo as capacidades do usuário ao permitir que ele execute comandos específicos no servidor e avaliar e avaliar, em primeira instância, se é absolutamente necessário que o usuário consiga realizar esse tipo de ação, pois elas envolvem um perigo potencial inerente.</p><p> Seria apropriado restringir esses recursos, visto que muitas linguagens têm funções integradas para executar comandos no computador, como a função system() em PHP, e que é possível restringir os recursos do interpretador que executa o aplicativo (como no caso do PHP).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/attacks/Session_hijacking_attack"
        ],
        "locale": "en",
        "title": "Concurrent Logins Not Properly Controlled.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os aplicativos que exigem autenticação devem permitir apenas uma sessão ativa por usuário e não devem permitir várias sessões de usuários autenticados em vários navegadores ou computadores.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>É aconselhável que as sessões do mesmo usuário não sejam executadas simultaneamente e que eles sempre recebam uma notificação quando uma sessão antiga ainda estiver ativa.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
          "https://cwe.mitre.org/data/definitions/319.html",
          "https://cwe.mitre.org/data/definitions/311.html"
        ],
        "locale": "en",
        "title": "Credentials Sent in Clear Text Via Email",
        "vulnType": "OWASP WSTG",
        "description": "<p>Essa falha implica que, após o usuário verificar sua identidade, a funcionalidade de registro ou recuperação de senha envia um e-mail com a senha. Há dois motivos principais pelos quais isso é considerado menos seguro:</p><p> O usuário recebe a senha de forma não criptografada.</p><p> O usuário fica bloqueado de sua conta até receber o e-mail, pois a senha da conta foi alterada no momento da solicitação. É possível impedir que um usuário acesse sua conta enviando inúmeras solicitações.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Um invasor pode descriptografar os dados usando ataques de força bruta.</p></li></ul>",
        "remediation": "<p>Ao enviar senhas por e-mail, as seguintes áreas devem ser revisadas:</p><ul><li><p> O usuário é obrigado a alterar a senha no primeiro login? A nova senha é enviada por e-mail não criptografado e pode permanecer na caixa de entrada do usuário indefinidamente, a menos que ele apague o e-mail. Portanto, o usuário deve ser obrigado a alterar a senha no primeiro login.</p></li><li><p> A senha é gerada com segurança? A senha deve ser gerada usando um gerador de números pseudoaleatórios criptograficamente seguro (CSPRNG) e deve ser longa o suficiente para evitar tentativas de adivinhação ou ataques de força bruta. Para uma experiência segura do usuário, ela deve ser gerada usando uma abordagem de frase-senha segura (ou seja, combinando várias palavras), em vez de uma sequência aleatória de caracteres.</p></li><li><p> A senha atual do usuário é enviada? Em vez de gerar uma nova senha para o usuário, alguns aplicativos enviam a senha atual. Este é um método muito inseguro, pois expõe sua senha atual por meio de um e-mail não criptografado. Além disso, se o site conseguir recuperar a senha existente, isso implica que as senhas são armazenadas usando criptografia reversível ou (mais provavelmente) em texto simples não criptografado, o que representa uma grave falha de segurança.</p></li><li><p> Os e-mails enviados de um domínio possuem proteção antispoofing? O domínio deve implementar SPF, DKIM e DMARC para impedir que invasores falsifiquem e-mails enviados por ele, o que poderia ser usado como parte de um ataque de engenharia social.</p></li><li><p> O e-mail é considerado suficientemente seguro? Os e-mails geralmente são enviados sem criptografia e, em muitos casos, a conta de e-mail do usuário não estará protegida pela MFA. Além disso, ela pode ser compartilhada entre várias pessoas, especialmente em um ambiente corporativo.</p></li></ul><p> Considere se a funcionalidade de redefinição de senha por e-mail é apropriada com base no contexto do aplicativo que está sendo testado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing",
          "https://cwe.mitre.org/data/definitions/942.html",
          "https://developer.mozilla.org/es/docs/Web/HTTP/CORS",
          "https://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains"
        ],
        "locale": "en",
        "title": "Cross-origin Resource Sharing (CORS) Missconfiguration",
        "vulnType": "OWASP WSTG",
        "description": "<p>CORS significa Cross-Origin Resource Sharing (Compartilhamento de Recursos entre Origens). É um recurso que oferece a possibilidade de: - Uma aplicação web expor recursos a todos os domínios ou a domínios restritos. - Um cliente web fazer uma solicitação AJAX para recursos em um domínio diferente do seu domínio de origem. Uma política CORS irrestrita pode ser abusada de diversas maneiras, o que pode colocar em risco a confidencialidade, a disponibilidade e a integridade das informações do usuário.</p>",
        "observation": "<ul><li><p>Outro: Varia de acordo com o contexto: Um invasor pode acessar qualquer funcionalidade que seja inadvertidamente acessível à fonte.</p></li></ul>",
        "remediation": "<p>Permita somente os domínios ou subdomínios confiáveis nos quais o aplicativo deve confiar no cabeçalho Access-Control-Allow-Origin.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/352.html"
        ],
        "locale": "en",
        "title": "Cross-site Request Forgery (CSRF)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um ataque CSRF tem como objetivo induzir um usuário a executar inadvertidamente uma funcionalidade em um aplicativo web vulnerável, o que será benéfico para o invasor e prejudicial para o usuário afetado.</p><p> Especificamente, o ataque é realizado forçando o navegador de um usuário desavisado a fazer uma solicitação ao site vulnerável, uma solicitação que o usuário realizará sem perceber e que será bem-sucedida enquanto o usuário estiver conectado ao site, pois as credenciais já estabelecidas (ID da sessão, cookies,...) serão usadas automaticamente.</p><p> Ao contrário dos ataques XSS, que exploram a confiança que um usuário tem em um site específico, a Falsificação de Solicitação Entre Sites explora a confiança que um site tem em um usuário específico. Esta é uma vulnerabilidade de autenticação insuficiente na qual o aplicativo não valida corretamente a origem da solicitação.</p>",
        "observation": "<ul><li><p>Controle de Acesso: DoS: Travar, Sair ou Reiniciar: As consequências variam dependendo da natureza da funcionalidade vulnerável ao CSRF. Um invasor pode efetivamente executar qualquer operação como vítima. Se a vítima for um administrador ou usuário privilegiado, as consequências podem incluir obter controle total sobre o aplicativo web – excluindo ou roubando dados, desinstalando o produto ou usando-o para lançar outros ataques contra todos os usuários do produto. Como o invasor tem a identidade da vítima, o escopo do CSRF é limitado apenas pelos privilégios da vítima.</p></li></ul>",
        "remediation": "<p>Para evitar ataques de Cross-Site Request Forgery, é necessário que cada solicitação feita ao site contenha um identificador único (um token sincronizador), que deve ser um parâmetro que o invasor não consiga descobrir.</p><p> Por exemplo, sugere-se enviar como parâmetro o identificador de sessão do usuário legítimo. O servidor deve verificar esse parâmetro como forma de validar que é de fato o usuário atual que está solicitando a operação atual.</p><p> Além disso, a interação do usuário pode ser solicitada para transações confidenciais como uma forma de autenticação dupla ou respondendo a um CAPTCHA.</p><p> Além disso, o cabeçalho REFERER na solicitação do cliente deve ser verificado para garantir que cada solicitação esteja vindo do site original e não de uma fonte externa. Essa mitigação, embora necessária, pode ser contornada por um invasor que utilize outros tipos de vulnerabilidades, como XSS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/310.html"
        ],
        "locale": "en",
        "title": "Cryptographic Modules Must Fail Securely - Padding Oracle Attack",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando um módulo criptográfico falha de forma insegura, o dispositivo deve ser colocado em estado de erro para que não funcione mais.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler dados do aplicativo: O invasor pode ler informações confidenciais</p></li></ul>",
        "remediation": "<p>Recomendamos que o módulo criptográfico passe por seus próprios testes usando o padrão do Instituto Nacional de Padrões e Tecnologia (NIST) para verificar se ele falha com segurança.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "DOM Based Cross-site Scripting (XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um ataque XSS conhecido como XSS baseado em DOM faz com que o código do lado do cliente seja executado de maneira &quot;inesperada&quot;, alterando o &quot;ambiente&quot; DOM que o navegador da vítima foi projetado para usar pelo script original do lado do cliente. Como resultado de alterações maliciosas feitas no ambiente DOM, o código do lado do cliente contido na página é executado de forma diferente, embora a própria página (ou seja, a resposta HTTP) permaneça a mesma.</p><p> Outros ataques XSS (armazenados ou refletidos), por outro lado, colocam a carga do ataque na página de resposta (devido a uma falha no lado do servidor).</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados do Aplicativo: O ataque mais comum realizado com cross-site scripting envolve a divulgação de informações armazenadas em cookies do usuário. Normalmente, um usuário mal-intencionado cria um script do lado do cliente que, quando analisado por um navegador, realiza alguma atividade (como enviar todos os cookies do site para um determinado endereço de e-mail). Esse script será carregado e executado por cada usuário que visita o site. Como o site que solicita a execução do script tem acesso aos cookies em questão, o script malicioso também tem.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Em algumas circunstâncias, pode ser possível executar código arbitrário no computador de uma vítima quando o cross-site scripting é combinado com outras falhas.</p></li><li><p> Controle de Acesso: Leitura de Dados de Aplicativos: A consequência de um ataque XSS é a mesma, independentemente de ser armazenado ou refletido. A diferença está em como o payload chega ao servidor. O XSS pode causar uma variedade de problemas para o usuário final, cuja gravidade varia de um incômodo ao comprometimento total da conta. Algumas vulnerabilidades de cross-site scripting podem ser exploradas para manipular ou roubar cookies, criar solicitações que podem ser confundidas com as de um usuário válido, comprometer informações confidenciais ou executar código malicioso nos sistemas do usuário final para uma variedade de propósitos nefastos. Outros ataques prejudiciais incluem a divulgação de arquivos do usuário final, a instalação de programas de Cavalo de Troia, o redirecionamento do usuário para outra página ou site, a execução de controles &quot;Active X&quot; (no Microsoft Internet Explorer) de sites que o usuário considera confiáveis e a modificação da apresentação do conteúdo.</p></li></ul>",
        "remediation": "<p>Não existe uma ação única que possa eliminar completamente a ameaça de ataques baseados em DOM. De modo geral, porém, a maneira mais eficaz de prevenir vulnerabilidades baseadas em DOM é impedir que dados de qualquer fonte não confiável alterem dinamicamente o valor passado a qualquer destinatário.</p><p> Se a funcionalidade desejada da aplicação tornar esse comportamento inevitável, defesas devem ser implementadas no código do lado do cliente. Em muitos casos, dados relevantes podem ser validados em uma lista de permissões, permitindo apenas conteúdo sabidamente seguro. Em outros casos, será necessário sanitizar ou criptografar os dados. Essa pode ser uma tarefa complexa e, dependendo do contexto em que os dados serão inseridos, pode envolver uma combinação de escape de JavaScript, codificação HTML e codificação de URL, na sequência apropriada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Default Usernames and Passwords",
        "vulnType": "OWASP WSTG",
        "description": "<p>A conta administrativa integrada possui senhas padrão em muitos hardwares e aplicativos web. Embora possam ocasionalmente ser geradas aleatoriamente, elas são frequentemente estáticas, facilitando a tarefa de um invasor de adivinhá-las ou obtê-las.</p><p> Além disso, senhas predefinidas podem ser atribuídas a novos usuários quando são criadas em aplicativos. Elas podem ser geradas automaticamente pelo aplicativo ou manualmente pela equipe. Em ambas as situações, as senhas são suscetíveis a ataques de adivinhação se não forem geradas com segurança.</p>",
        "observation": "<ul><li><p>Controle de acesso: obtenha privilégios ou assuma identidade: um invasor pode facilmente adivinhar senhas de usuários e obter acesso às contas de usuários.</p></li></ul>",
        "remediation": "<p>O design de um produto deve exigir a conformidade com uma política de senhas apropriada. Os requisitos específicos para senhas dependem muito de fatores contextuais, mas é recomendável que contenham os seguintes atributos:</p><ol><li><p> Aplicação de um comprimento mínimo e máximo</p></li><li><p> Restrições contra reutilização de senhas.</p></li><li><p> Restrições ao uso de senhas comuns.</p></li><li><p> Restrições quanto ao uso de sequências contextuais na senha (por exemplo, ID do usuário, nome do aplicativo).</p></li></ol><p> Dependendo do modelo de ameaça, a política de senha pode incluir vários atributos adicionais.</p><p> Senhas complexas que exigem conjuntos de caracteres mistos (alfabéticos, numéricos, especiais, maiúsculas e minúsculas):</p><ul><li><p> Aumentar o intervalo de caracteres torna a senha mais difícil de quebrar e pode ser apropriado para sistemas que dependem de autenticação de fator único.</p></li><li><p> Infelizmente, uma senha complexa pode ser difícil de memorizar, o que incentiva o usuário a selecionar uma senha curta ou a gerenciá-la incorretamente (anotá-la).</p></li><li><p> Outra desvantagem dessa abordagem é que ela geralmente não resulta em um aumento significativo na complexidade geral da senha devido ao uso previsível de vários símbolos pelas pessoas.</p></li></ul><p> Comprimento mínimo extenso:</p><ol><li><p> Aumentar o número de caracteres torna a senha mais difícil de quebrar e pode ser apropriado para sistemas que dependem de autenticação de fator único.</p></li><li><p> Uma desvantagem dessa abordagem é que selecionar uma boa senha não é fácil e senhas ruins ainda podem ser geradas. Pode ser necessário algum estímulo para incentivar senhas longas e imprevisíveis.</p></li></ol><p> Senhas geradas aleatoriamente:</p><ol><li><p> Gerar uma senha para o usuário pode ajudar a garantir que os requisitos de comprimento e complexidade sejam atendidos e pode resultar no uso de senhas fortes.</p></li><li><p> Uma desvantagem dessa abordagem é que a senha ou chave resultante pode ser muito difícil de memorizar, o que incentiva a anotação delas.</p></li></ol><p> Expiração da senha:</p><ol><li><p> Exigir uma troca periódica de senha pode reduzir o tempo que um invasor tem para quebrar uma senha, ao mesmo tempo em que limita os danos causados pela exposição da senha em outros lugares.</p></li><li><p> A expiração de senha pode ser uma boa técnica de mitigação quando senhas longas e complexas não são desejadas.</p></li></ol>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Error handling",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling"
        ],
        "locale": "en",
        "title": "Disclosure of Sensitive Information Due to Improper Handling of Application Errors.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Erros verbais que não são controlados adequadamente frequentemente resultam em respostas que informam o usuário sobre a arquitetura interna do aplicativo. Versões de softwares instalados ou informações de bancos de dados são alguns exemplos de dados que podem ser recuperados dessa maneira.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: O invasor obtém informações de uma resposta de mensagem de erro</p></li></ul>",
        "remediation": "<p>Para impedir que o aplicativo exiba informações confidenciais da sua infraestrutura ou banco de dados, implemente um sistema adequado de redirecionamentos para páginas seguras ou textos genéricos na resposta.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/73.html"
        ],
        "locale": "en",
        "title": "External Control of Filename",
        "vulnType": "OWASP WSTG",
        "description": "<p>Devido a uma vulnerabilidade, os nomes de arquivos usados pelo sistema de arquivos podem ser alterados ou controlados pela entrada do usuário. Um invasor pode criar um pacote que altera a extensão para download do arquivo ZIP.</p>",
        "observation": "<ul><li><p>Confidencialidade: Modificar arquivos ou diretórios: O aplicativo pode operar em arquivos inesperados. A confidencialidade é violada quando o nome do arquivo alvo não é legível diretamente pelo invasor.</p></li><li><p> Integridade: Modificar arquivos ou diretórios: O aplicativo pode operar em arquivos inesperados. Isso pode violar a integridade se o nome do arquivo for escrito ou se o nome do arquivo for de um programa ou outra forma de código executável.</p></li><li><p> Disponibilidade: DoS: Travar, Sair ou Reiniciar; DoS: Consumo de Recursos (Outros): O aplicativo pode operar em arquivos inesperados. A disponibilidade pode ser violada se o invasor especificar um arquivo inesperado que o aplicativo modifica. A disponibilidade também pode ser afetada se o invasor especificar um nome de arquivo para um arquivo grande ou apontar para um dispositivo especial ou um arquivo que não tenha o formato esperado pelo aplicativo.</p></li></ul>",
        "remediation": "<p>Acreditar que todas as entradas são maliciosas Use uma lista de entradas que sejam estritamente compatíveis com as especificações como parte de uma estratégia de validação de entrada &quot;aceitar como boas&quot;. Qualquer entrada que não esteja estritamente de acordo com as especificações deve ser rejeitada ou alterada. Use listas de permissões rígidas que restrinjam o conjunto de caracteres que pode ser usado ao validar nomes de arquivo. Para evitar vulnerabilidades como CWE-23, permita apenas um único caractere &quot;.&quot; no nome do arquivo e mantenha separadores de diretório como &quot;/&quot; de fora. Acreditar que todas as entradas são maliciosas Use uma lista de entradas que sejam estritamente compatíveis com as especificações como parte de uma estratégia de validação de entrada &quot;aceitar como boas&quot;. Qualquer entrada que não esteja estritamente de acordo com as especificações deve ser rejeitada ou alterada. Use listas de permissões rígidas que restrinjam o conjunto de caracteres que pode ser usado ao validar nomes de arquivo.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/35.html",
          "https://capec.mitre.org/data/definitions/126.html"
        ],
        "locale": "en",
        "title": "File Path Manipulation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando dados controláveis pelo usuário são inseridos em um arquivo ou caminho de URL usado no servidor para acessar recursos locais, que podem estar localizados dentro ou fora da raiz da web, são criadas vulnerabilidades de manipulação de caminho de arquivo. Se um caminho de arquivo estiver vulnerável, um invasor pode alterá-lo para acessar recursos diferentes.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Integridade: modificar arquivos ou diretórios: um invasor pode modificar dados confidenciais, gravando os dados diretamente em um armazenamento de dados que não esteja devidamente restrito ou acessando funcionalidades privilegiadas e insuficientemente protegidas para gravar os dados.</p></li></ul>",
        "remediation": "<p>Acreditar que todas as entradas são maliciosas. Use uma lista de entradas que estejam em estrita conformidade com as especificações como parte de uma estratégia de validação de entradas &quot;aceitar entradas consideradas boas&quot;. Qualquer entrada que não esteja em estrita conformidade com as especificações deve ser rejeitada ou alterada. Use listas de permissões rigorosas que restrinjam o conjunto de caracteres que pode ser usado na validação de nomes de arquivos. Para evitar vulnerabilidades como a CWE-23, permita apenas um único caractere &quot;.&quot; no nome do arquivo e mantenha separadores de diretório como &quot;/&quot; fora.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "HTML Content Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Injeções de HTML permitem a injeção de código HTML do lado do cliente, que o navegador da vítima interpretará ao visitar uma URL. É possível alterar o DOM e, em algumas circunstâncias, injetar código JavaScript para auxiliar no roubo de dados do navegador da vítima.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de recursos (memória): Um invasor pode fornecer valores inesperados e causar uma falha no programa ou consumo excessivo de recursos, como memória e CPU.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Um invasor pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de maneiras inesperadas, incluindo execução de comandos arbitrários.</p></li></ul>",
        "remediation": "<p>Esse tipo de ataque pode ser interrompido higienizando adequadamente a entrada do usuário ou validando corretamente o conteúdo que o servidor recebe e envia.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "HTTP Only Attribute Missing in Cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os atributos Secure e HttpOnly são utilizados para garantir que os cookies sejam enviados com segurança e não possam ser acessados por pessoas ou scripts não autorizados. Somente solicitações criptografadas feitas usando o protocolo HTTPS, e nunca HTTP desprotegido, têm permissão para enviar cookies com o atributo Secure para o servidor. A API JavaScript não pode acessar um cookie com o atributo HttpOnly porque ele é enviado apenas para o servidor.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Se o sinalizador HttpOnly não estiver definido, informações confidenciais armazenadas no cookie poderão ser expostas a terceiros não intencionais.</p></li><li><p> Integridade: Obtenha privilégios ou assuma identidade: Se o cookie em questão for um cookie de autenticação, não definir o sinalizador HttpOnly pode permitir que um adversário roube dados de autenticação (por exemplo, um ID de sessão) e assuma a identidade do usuário.</p></li></ul>",
        "remediation": "<p>Os atributos HttpOnly e Secure devem ser usados pelo servidor ao definir cookies para mitigar essa vulnerabilidade. Um exemplo é fornecido abaixo:</p><p> Definir-Cookie: cookie1=info1; Seguro; Somente HTTP</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution",
          "https://cwe.mitre.org/data/definitions/235.html",
          "https://capec.mitre.org/data/definitions/460.html"
        ],
        "locale": "en",
        "title": "HTTP Parameter Pollution (HPP)",
        "vulnType": "OWASP WSTG",
        "description": "<p>A Poluição de Parâmetros HTTP se aproveita do comportamento incorreto do aplicativo ao responder a requisições HTTP que têm o mesmo parâmetro definido no servidor, mas foram enviadas com valores diferentes. A Poluição de Parâmetros HTTP se aproveita do comportamento incorreto do aplicativo ao responder a requisições HTTP que têm o mesmo parâmetro definido no servidor, mas foram enviadas com valores diferentes.</p>",
        "observation": "<ul><li><p>Integridade: Estado inesperado: Um invasor pode manipular parâmetros no aplicativo</p></li></ul>",
        "remediation": "<p>Esse tipo de ataque seria evitado higienizando adequadamente os dados de entrada, verificando o número de instâncias de parâmetros individuais em uma solicitação e procurando por solicitações com atribuições duplicadas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References",
          "https://cwe.mitre.org/data/definitions/706.html",
          "https://cwe.mitre.org/data/definitions/813.html"
        ],
        "locale": "en",
        "title": "IDOR (insecure Direct Object References)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando um aplicativo concede acesso direto a objetos com base na entrada do usuário, isso é conhecido como &quot;referência direta a objeto insegura&quot; (IDOR). Essa vulnerabilidade permite que invasores ignorem a autenticação e obtenham acesso direto a recursos do sistema, como arquivos ou registros de banco de dados. Ao alterar o valor de um parâmetro usado para apontar diretamente para um objeto, um invasor pode ignorar a autenticação e obter acesso irrestrito aos recursos. Esses recursos podem incluir arquivos do sistema, entradas de banco de dados de outros usuários, etc. Isso ocorre porque o aplicativo usa a entrada fornecida pelo usuário para recuperar um objeto sem realizar verificações de autorização suficientes.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode executar um número arbitrário de tentativas de autenticação usando senhas diferentes e, eventualmente, obter acesso à conta alvo.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: é possível escalonamento horizontal de privilégios (um usuário pode visualizar/modificar informações de outro usuário).</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: a escalada vertical de privilégios é possível se a chave controlada pelo usuário for, na verdade, um sinalizador que indica o status do administrador, permitindo que o invasor obtenha acesso administrativo.</p></li></ul>",
        "remediation": "<p>Evite exibir referências a itens secretos, como nomes de arquivos ou chaves.</p><p> O lado do servidor deve implementar corretamente a validação de parâmetros e a verificação de objetos para todas as referências.</p><p> Os tokens devem ser criados de forma a restringir sua atribuição ao usuário e impedir que sejam compartilhados com o público.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/285.html"
        ],
        "locale": "en",
        "title": "Improper Authorization",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando um ator tenta acessar um recurso ou executar uma ação, o software não executa ou executa incorretamente uma verificação de autorização. Com base nos privilégios do usuário e em quaisquer permissões ou outros requisitos de controle de acesso que se aplicam ao recurso, a autorização é o processo de determinar se um usuário com uma determinada identidade pode acessar um recurso específico.</p><p> Os usuários conseguem acessar dados ou realizar ações que não deveriam ser capazes de realizar quando as verificações de controle de acesso não são aplicadas de forma consistente, ou mesmo não são aplicadas. Isso pode gerar inúmeros problemas, como exposição de informações, ataques de negação de serviço e execução arbitrária de código.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler arquivos ou diretórios: Um invasor pode ler dados confidenciais, lendo os dados diretamente de um armazenamento de dados que não é devidamente restrito ou acessando funcionalidades privilegiadas e insuficientemente protegidas para ler os dados.</p></li><li><p> Integridade: modificar arquivos ou diretórios: um invasor pode modificar dados confidenciais, gravando os dados diretamente em um armazenamento de dados que não esteja devidamente restrito ou acessando funcionalidades privilegiadas e insuficientemente protegidas para gravar os dados.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: um invasor pode obter privilégios modificando ou lendo dados críticos diretamente ou acessando funcionalidades privilegiadas e insuficientemente protegidas.</p></li></ul>",
        "remediation": "<p>Arquitetura e Design</p><ul><li><p> Divida o software em áreas anônimas, normais, privilegiadas e administrativas. Reduza a superfície de ataque mapeando cuidadosamente as funções com dados e funcionalidades. Use o controle de acesso baseado em funções (RBAC) para impor as funções nos limites apropriados.</p></li></ul><p> Observe que essa abordagem pode não proteger contra autorização horizontal, ou seja, não protegerá um usuário de atacar outros com a mesma função.</p><ul><li><p> Certifique-se de realizar verificações de controle de acesso relacionadas à sua lógica de negócios. Essas verificações podem ser diferentes das verificações de controle de acesso que você aplica a recursos mais genéricos, como arquivos, conexões, processos, memória e registros de banco de dados. Por exemplo, um banco de dados pode restringir o acesso a registros médicos a um usuário específico, mas cada registro pode ser destinado apenas ao paciente e ao médico do paciente.</p></li><li><p> Use uma biblioteca ou estrutura verificada que não permita que essa fraqueza ocorra ou que forneça construções que tornem essa fraqueza mais fácil de evitar.</p></li><li><p> Por exemplo, considere usar estruturas de autorização como o JAAS Authorization Framework REF-233 e o recurso OWASP ESAPI Access Control REF-45.</p></li><li><p> Para aplicações web, certifique-se de que o mecanismo de controle de acesso seja aplicado corretamente no lado do servidor em todas as páginas. Os usuários não devem conseguir acessar nenhuma funcionalidade ou informação não autorizada simplesmente solicitando acesso direto à página.</p></li><li><p> Uma maneira de fazer isso é garantir que todas as páginas que contêm informações confidenciais não sejam armazenadas em cache e que todas essas páginas restrinjam o acesso a solicitações acompanhadas por um token de sessão ativo e autenticado associado a um usuário que tenha as permissões necessárias para acessar essa página.</p></li></ul><p> Configuração do sistema: Instalação</p><ul><li><p> Utilize os recursos de controle de acesso do seu sistema operacional e ambiente de servidor e defina suas listas de controle de acesso adequadamente. Use uma política de &quot;negação padrão&quot; ao definir essas ACLs.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/284.html"
        ],
        "locale": "en",
        "title": "Improper Access Control",
        "vulnType": "OWASP WSTG",
        "description": "<p>O software não restringe ou restringe incorretamente o acesso a um recurso de um agente não autorizado. O controle de acesso envolve o uso de vários mecanismos de proteção, como:</p><ul><li><p> Autenticação (provar a identidade de um ator)</p></li><li><p> Autorização (garantindo que um determinado ator possa acessar um recurso)</p></li><li><p> Responsabilidade (rastreamento das atividades realizadas)</p></li></ul><p> Quando algum mecanismo não é aplicado ou falha, os invasores podem comprometer a segurança do software obtendo privilégios, lendo informações confidenciais, executando comandos, evitando a detecção, etc.</p><p> Existem dois comportamentos distintos que podem introduzir fraquezas no controle de acesso:</p><ul><li><p> Especificação: privilégios, permissões, propriedade, etc. incorretos são explicitamente especificados para o usuário ou o recurso (por exemplo, definindo um arquivo de senhas para ser gravável por todos ou concedendo permissões de administrador a um usuário convidado). Essa ação pode ser executada pelo programa ou pelo administrador.</p></li><li><p> Aplicação: o mecanismo contém erros que o impedem de aplicar adequadamente os requisitos de controle de acesso especificados (por exemplo, permitindo que o usuário especifique seus próprios privilégios ou permitindo que uma ACL sintaticamente incorreta produza configurações inseguras). Esse problema ocorre dentro do próprio programa, pois ele não aplica de fato a política de segurança pretendida pelo administrador.</p></li></ul>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: verificações de controle de acesso para dados ou funcionalidades específicas do usuário podem ser ignoradas.</p></li></ul>",
        "remediation": "<p>Arquitetura e Design</p><ul><li><p> Gerencie com muito cuidado a configuração, o gerenciamento e o manuseio de privilégios. Gerencie explicitamente as zonas de confiança no software.</p></li><li><p> Compartimente o sistema para ter áreas &quot;seguras&quot; onde os limites de confiança possam ser definidos de forma inequívoca. Não permita que dados confidenciais ultrapassem os limites de confiança e tenha sempre cuidado ao interagir com um compartimento fora da área segura.</p></li><li><p> Garanta que a compartimentação adequada seja incorporada ao projeto do sistema e que essa compartimentação permita e reforce ainda mais a funcionalidade de separação de privilégios. Arquitetos e designers devem se basear no princípio do menor privilégio para decidir quando é apropriado usar e remover privilégios do sistema.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Improper Authentication",
        "vulnType": "OWASP WSTG",
        "description": "<p>O pedido não prova ou não prova suficientemente que a alegação de um ator de possuir uma identidade específica é verdadeira.</p>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>Utilize uma estrutura ou biblioteca para autenticação, como o recurso de autenticação OWASP ESAPI.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "In Band Error-based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma interação inesperada com o banco de dados, conhecida como ataque de injeção de SQL (SQLi), tenta obter informações ou até mesmo executar comandos usando essa falha. Como se trata de uma injeção de SQL baseada em erro, neste caso, a resposta não fornece informações diretamente sobre o erro; em vez disso, o invasor precisa interpretar as mensagens de erro fornecidas pelo servidor para obter as informações.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Como os bancos de dados SQL geralmente contêm dados confidenciais, a perda de confidencialidade é um problema frequente com vulnerabilidades de injeção de SQL.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Se comandos SQL ruins forem usados para verificar nomes de usuários e senhas, pode ser possível conectar-se a um sistema como outro usuário sem nenhum conhecimento prévio da senha.</p></li><li><p> Controle de acesso: Mecanismo de proteção contra bypass: Se as informações de autorização forem mantidas em um banco de dados SQL, pode ser possível alterar essas informações por meio da exploração bem-sucedida de uma vulnerabilidade de injeção de SQL.</p></li><li><p> Integridade: Modificar dados do aplicativo: Assim como é possível ler informações confidenciais, também é possível fazer alterações ou até mesmo excluir essas informações com um ataque de injeção de SQL.</p></li></ul>",
        "remediation": "<p>É recomendável higienizar os parâmetros de entrada do aplicativo para resolver esse problema, pois isso evita que invasores introduzam caracteres que podem alterar a consulta SQL e permitir a recuperação de informações.</p><p> A principal sugestão é implementar um sistema de &quot;Lista Branca&quot;, onde apenas as palavras e caracteres definidos na lista são aceitos e qualquer outro valor é ignorado antes de ser usado no banco de dados. Se essa opção não for viável, uma &quot;Lista Negra&quot; que evite os caracteres definidos pode ser criada usando caracteres vulneráveis a esse tipo de ataque, como % #&#39;&quot;&quot;&quot;&quot;&#39;&quot;&quot;&quot; () +, ; e palavras-chave de consulta SQL como &quot;select&quot;, &quot;where&quot;, &quot;union&quot;, &quot;join&quot; e &quot;update&quot;. Além disso, você deve procurar por quaisquer variações de codificação para esses caracteres, como codificação de URL, unicode/UTF-8 e hexadecimal.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://owasp.org/www-community/attacks/Blind_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "In Band Union-based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>O ataque de injeção de SQL (SQLi) tenta obter informações ou até mesmo executar comandos por meio dessa vulnerabilidade, interagindo inesperadamente com o banco de dados. Como se trata de uma injeção de SQL às cegas, neste caso, a resposta não fornece informações diretamente sobre ela; em vez disso, o invasor precisa decifrar as mensagens de resposta do servidor para obter as informações.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Como os bancos de dados SQL geralmente contêm dados confidenciais, a perda de confidencialidade é um problema frequente com vulnerabilidades de injeção de SQL.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Se comandos SQL ruins forem usados para verificar nomes de usuários e senhas, pode ser possível conectar-se a um sistema como outro usuário sem nenhum conhecimento prévio da senha.</p></li><li><p> Controle de acesso: Mecanismo de proteção contra bypass: Se as informações de autorização forem mantidas em um banco de dados SQL, pode ser possível alterar essas informações por meio da exploração bem-sucedida de uma vulnerabilidade de injeção de SQL.</p></li><li><p> Integridade: Modificar dados do aplicativo: Assim como é possível ler informações confidenciais, também é possível fazer alterações ou até mesmo excluir essas informações com um ataque de injeção de SQL.</p></li></ul>",
        "remediation": "<p>É recomendável higienizar os parâmetros de entrada do aplicativo para resolver esse problema, pois isso evita que invasores introduzam caracteres que podem alterar a consulta SQL e permitir a recuperação de informações.</p><p> A principal sugestão é implementar um sistema de &quot;Lista Branca&quot;, onde apenas as palavras e caracteres definidos na lista são aceitos e qualquer outro valor é ignorado antes de ser usado no banco de dados. Se essa opção não for viável, uma &quot;Lista Negra&quot; que evite os caracteres definidos pode ser criada usando caracteres vulneráveis a esse tipo de ataque, como % #&#39;&quot;&quot;&quot;&quot;&#39;&quot;&quot;&quot; () +, ; e palavras-chave de consulta SQL como &quot;select&quot;, &quot;where&quot;, &quot;union&quot;, &quot;join&quot; e &quot;update&quot;. Além disso, você deve procurar por quaisquer variações de codificação para esses caracteres, como codificação de URL, unicode/UTF-8 e hexadecimal.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",
          "https://cwe.mitre.org/data/definitions/644.html"
        ],
        "locale": "en",
        "title": "Injection of Commands Into HTTP Host Headers.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um servidor web normalmente hospeda vários aplicativos web no mesmo endereço IP, referenciando cada aplicativo por meio do host virtual. Em uma solicitação HTTP de entrada, os servidores web normalmente enviam a solicitação ao host virtual de destino com base no valor fornecido no cabeçalho Host. Sem a validação adequada do valor do cabeçalho, o invasor pode fornecer dados inválidos, fazendo com que o servidor web:</p><ul><li><p> Envie as solicitações para o primeiro host virtual da lista.</p></li><li><p> Causar um redirecionamento para um domínio controlado pelo invasor.</p></li><li><p> Execute um envenenamento do cache da web.</p></li><li><p> Manipule a funcionalidade de redefinição de senha.</p></li></ul>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>Para filtrar, escapar ou codificar dados não seguros enviados do servidor em um cabeçalho de resposta HTTP, execute a validação de saída.</p><p> Desabilite a capacidade do navegador do cliente de executar scripts.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation",
          "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/502.html"
        ],
        "locale": "en",
        "title": "Insecure Deserialization",
        "vulnType": "OWASP WSTG",
        "description": "<p>Muitas vezes, é conveniente serializar objetos para comunicação ou salvá-los para uso posterior. No entanto, códigos ou dados desserializados podem frequentemente ser modificados sem o uso das funções de acesso fornecidas, caso não utilizem criptografia para se proteger. Além disso, qualquer criptografia ainda seria considerada segurança do lado do cliente, o que é uma suposição de segurança perigosa.</p><p> Não se pode confiar que dados não confiáveis sejam bem formados. Quando os desenvolvedores não impõem restrições às &quot;cadeias de gadgets&quot;, ou seja, séries de instâncias e invocações de métodos que podem ser executadas automaticamente durante o processo de desserialização (ou seja, antes que o objeto seja retornado ao chamador), elas podem, às vezes, ser exploradas por invasores para realizar ações não autorizadas, como gerar um shell.</p><p> Serialização e desserialização referem-se ao processo de pegar os dados relacionados ao objeto interno do programa, empacotando-os de uma forma que permita que os dados sejam armazenados ou transferidos externamente (&quot;serialização&quot;) e, então, extrair os dados serializados para reconstruir o objeto original (&quot;desserialização&quot;).</p>",
        "observation": "<ul><li><p>Integridade: Estado inesperado: invasores podem modificar objetos ou dados inesperados que eram considerados seguros contra modificações.</p></li><li><p> Disponibilidade: DoS: Consumo de recursos (CPU): Se uma função estiver fazendo uma suposição sobre quando terminar, com base em uma sentinela em uma sequência de caracteres, ela pode facilmente nunca terminar.</p></li><li><p> Outros: Varia de acordo com o contexto: As consequências podem variar bastante, pois dependem de quais objetos ou métodos estão sendo desserializados e de como são usados. Presumir que o código no objeto desserializado é válido é perigoso e pode permitir exploração.</p></li></ul>",
        "remediation": "<p>Possíveis mitigações para diferentes fases do processo de criação do aplicativo são descritas abaixo:</p><ul><li><p> Fases: Arquitetura e design; implementação. Se disponível, utilize os recursos de assinatura/selagem da linguagem de programação para garantir que os dados desserializados não tenham sido corrompidos. Por exemplo, um código de autenticação de mensagens baseado em hash (HMAC) pode ser usado para garantir que os dados não tenham sido modificados.</p></li><li><p> Fase: Implementação. Ao desserializar dados, recomenda-se preencher um novo objeto em vez de apenas desserializar. O resultado é que os dados passam por uma validação de entrada segura e as funções são seguras.</p></li><li><p> Fase: Implementação. Defina explicitamente um objeto final() para evitar a desserialização.</p></li><li><p> Fases: Arquitetura e Design; Implementação. Torne os campos transitórios para protegê-los da desserialização. Uma tentativa de serializar e depois desserializar uma classe contendo campos transitórios resultará em NULLs onde os dados transitórios deveriam estar. Essa é uma ótima maneira de evitar que variáveis temporárias, de ambiente ou sensíveis sejam transferidas e usadas indevidamente.</p></li><li><p> Fase: Implementação. Evite ter tipos ou gadgets desnecessários disponíveis que possam ser explorados para fins maliciosos. Isso limita a possibilidade de tipos e gadgets indesejados ou não autorizados serem explorados pelo invasor. Adicione apenas classes aceitáveis a uma lista de permissões. Observação: Novos gadgets são descobertos constantemente, portanto, isso por si só não é uma mitigação suficiente.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "Insecure Validation in File Upload Functionality",
        "vulnType": "OWASP WSTG",
        "description": "<p>Muitos aplicativos permitem que os usuários carreguem dados em seus processos de negócios. Embora a validação de entrada para campos de entrada baseados em texto seja amplamente compreendida, a aceitação de arquivos torna sua implementação mais desafiadora. Embora muitos sites utilizem restrições diretas baseadas em uma lista de extensões permitidas (ou bloqueadas), isso é insuficiente para impedir que invasores carreguem tipos de arquivo seguros com conteúdo malicioso.</p>",
        "observation": "<ul><li><p>Disponibilidade: Executar Código ou Comandos Não Autorizados: A execução arbitrária de código é possível se um arquivo carregado for interpretado e executado como código pelo destinatário. Isso é especialmente verdadeiro para extensões .asp e .php carregadas em servidores web, pois esses tipos de arquivo são frequentemente tratados como executáveis automaticamente, mesmo quando as permissões do sistema de arquivos não especificam a execução. Por exemplo, em ambientes Unix, os programas normalmente não podem ser executados a menos que o bit de execução esteja definido, mas programas PHP podem ser executados pelo servidor web sem invocá-los diretamente no sistema operacional.</p></li></ul>",
        "remediation": "<p>Controle adequadamente os tipos de arquivos enviados ao aplicativo. Examine o tipo de arquivo, prestando atenção tanto à extensão quanto ao conteúdo.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/Session_Timeout"
        ],
        "locale": "en",
        "title": "Insufficient Session Expiration",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os cookies de sessão exclusivos de usuários autenticados, normalmente usados por aplicativos da web, devem ser configurados com um tempo de vida útil para que expirem após um período máximo definido. Por isso, se um usuário efetuar login em outro computador sem encerrar a sessão manualmente, qualquer outro usuário que efetuar login nesse computador e acessar o aplicativo continuará na sessão do usuário autenticado anterior.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>Reduza os tempos de expiração das sessões.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "JSON Validation Schema",
        "vulnType": "OWASP WSTG",
        "description": "<p>Um vocabulário chamado JSON Schema permite que você anote e valide documentos JSON.</p><p> Você tem mais controle sobre os tipos de entrada de usuário que podem ser fornecidos em seu aplicativo ao adicionar esquemas aos seus arquivos JSON. Quando feito corretamente, isso reduz drasticamente o vetor de um invasor.</p><p> No entanto, como uma linha de defesa adicional, você deve sempre aplicar sua própria validação e rejeição de entrada. Essa estratégia também é preferível porque você também deseja neutralizar e registrar solicitações e entradas do usuário.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de recursos (memória): Um invasor pode fornecer valores inesperados e causar uma falha no programa ou consumo excessivo de recursos, como memória e CPU.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Um invasor pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de maneiras inesperadas, incluindo execução de comandos arbitrários.</p></li></ul>",
        "remediation": "<p>Para garantir uma solicitação JSON formatada corretamente, confirme se a validação do esquema JSON ocorre. Em seguida, valide cada campo de entrada antes de qualquer processamento de dados.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection",
          "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/90.html"
        ],
        "locale": "en",
        "title": "LDAP Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Informações sobre usuários, hosts e diversos outros objetos são armazenadas usando o Lightweight Directory Access Protocol (LDAP). Uma injeção LDAP é um ataque do lado do servidor que pode revelar, modificar ou inserir dados confidenciais sobre usuários e hosts representados em uma estrutura LDAP. Os parâmetros de entrada que são posteriormente passados para as funções internas de localização, adição e modificação são alterados para realizar isso.</p><p> Para permitir que os usuários autentiquem ou pesquisem informações de outros usuários dentro de uma estrutura corporativa, um aplicativo web pode usar LDAP. Os ataques de injeção de LDAP têm como objetivo inserir metacaracteres de filtro de pesquisa LDAP em uma consulta de aplicativo que será executada.</p>",
        "observation": "<ul><li><p>Integridade: Modificar dados do aplicativo: Um invasor pode incluir entradas que alteram a consulta LDAP, permitindo que comandos ou códigos não intencionais sejam executados, permitindo que dados confidenciais sejam lidos ou modificados ou causando outro comportamento não intencional.</p></li></ul>",
        "remediation": "<p>Suponha que todas as entradas sejam maliciosas. Use uma estratégia de validação de entrada &quot;aceite o que é bem conhecido&quot;, ou seja, use uma lista de entradas aceitáveis que estejam em estrita conformidade com as especificações. Rejeite qualquer entrada que não esteja em estrita conformidade com as especificações ou transforme-a em algo que esteja.</p><p> Ao realizar a validação de entrada, considere todas as propriedades potencialmente relevantes, como comprimento, tipo de entrada, intervalo completo de valores aceitáveis, entradas ausentes ou extras, sintaxe, consistência entre campos relacionados e conformidade com as regras de negócios. Como exemplo de lógica de regra de negócios, &quot;ship&quot; pode ser sintaticamente válido por conter apenas caracteres alfanuméricos, mas não é válido se a entrada deve conter apenas cores como &quot;red&quot; ou &quot;blue&quot;.</p><p> Não confie apenas na busca por entradas maliciosas ou malformadas. É provável que pelo menos uma entrada indesejada passe despercebida, especialmente se o ambiente do código mudar. Isso pode dar aos invasores espaço suficiente para contornar a validação pretendida. No entanto, listas de negação podem ser úteis para detectar ataques em potencial ou determinar quais entradas são tão malformadas que devem ser rejeitadas imediatamente.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema",
          "https://cwe.mitre.org/data/definitions/288.html"
        ],
        "locale": "en",
        "title": "Login Functionality Bypass",
        "vulnType": "OWASP WSTG",
        "description": "<p>Em segurança de computadores, autenticação é o processo de tentar verificar a identidade digital do remetente de uma comunicação. Um exemplo comum disso é o processo de login. Testar o esquema de autenticação significa entender como o processo de autenticação funciona e usar essas informações para burlar o mecanismo de autenticação.</p><p> Embora a maioria dos aplicativos exija autenticação para acessar informações privadas ou executar tarefas, nem todos os métodos de autenticação são capazes de fornecer segurança adequada. Negligência, ignorância ou simples subestimação de ameaças à segurança frequentemente resultam em esquemas de autenticação que podem ser contornados simplesmente ignorando a página de login e acessando diretamente uma página interna que deveria ser acessível somente após a autenticação ser realizada.</p><p> Além disso, muitas vezes é possível contornar as medidas de autenticação manipulando solicitações e enganando o aplicativo, fazendo-o pensar que o usuário já está autenticado. Isso pode ser feito modificando o parâmetro de URL fornecido, manipulando o formulário ou falsificando sessões.</p><p> Problemas relacionados ao esquema de autenticação podem ser encontrados em diferentes estágios do ciclo de vida de desenvolvimento de software (SDLC), como nas fases de design, desenvolvimento e implantação:</p><ul><li><p> Na fase de design, os erros podem incluir uma definição errada das seções do aplicativo a serem protegidas, optar por não aplicar protocolos de criptografia fortes para proteger a transmissão de credenciais e muito mais.</p></li><li><p> Na fase de desenvolvimento, os erros podem incluir implementação incorreta da funcionalidade de validação de entrada ou não seguir as práticas recomendadas de segurança para a linguagem específica.</p></li><li><p> Na fase de implantação do aplicativo, pode haver problemas durante a configuração do aplicativo (atividades de instalação e configuração) devido à falta de conhecimento técnico necessário ou à falta de boa documentação.</p></li></ul>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: O invasor pode usar um caminho ou canal alternativo que não requer autenticação.</p></li></ul>",
        "remediation": "<p>Somente usuários autenticados podem visualizar as páginas privadas do aplicativo.</p><p> Explique em detalhes as modificações necessárias para resolver a vulnerabilidade no caso de ignorar a funcionalidade de autenticação.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/263.html"
        ],
        "locale": "en",
        "title": "No Password Rotation Policy",
        "vulnType": "OWASP WSTG",
        "description": "<p>Algumas políticas exigem que os usuários alterem suas senhas periodicamente, geralmente a cada 90 ou 180 dias.</p><p> O benefício da expiração de senhas, no entanto, é discutível. Sistemas que implementam tais políticas às vezes impedem que os usuários escolham uma senha muito próxima de uma senha selecionada anteriormente.</p><p> Essa política pode muitas vezes ter efeitos negativos. Alguns usuários têm dificuldade em criar senhas &quot;boas&quot; que também sejam fáceis de lembrar; portanto, se as pessoas precisam escolher muitas senhas porque precisam alterá-las com frequência, acabam usando senhas muito mais fracas; a política também incentiva os usuários a anotá-las. Além disso, se a política impede que um usuário repita uma senha recente, isso exige que haja um banco de dados com as senhas recentes de todos (ou seus hashes), em vez de apagar as antigas da memória. Por fim, os usuários podem alterar suas senhas repetidamente em poucos minutos e, em seguida, voltar para a que realmente desejam usar, burlando completamente a política de alteração de senha.</p>",
        "observation": "<ul><li><p>Controle de acesso: obtenha privilégios ou assuma identidade: conforme as senhas envelhecem, a probabilidade de que elas sejam comprometidas aumenta.</p></li></ul>",
        "remediation": "<p>Somente quando a força da senha imposta pelo aplicativo não for mais forte o suficiente para resistir a ataques de força bruta devido ao aumento do poder de computação, os usuários poderão ser obrigados a atualizar suas senhas.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Out of Band SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>A injeção de SQL fora de banda extrai dados através do canal de saída, que pode ser o protocolo DNS ou HTTP, ao contrário da injeção de SQL em banda e cega. Dependendo da função disponível, um sistema de banco de dados pode ou não ser capaz de iniciar uma solicitação HTTP ou DNS de saída. A função pode definir uma conexão (por exemplo, DBMS LDAP.INIT, UTL HTTP.request) ou operar em arquivos (por exemplo, load file(), master..xp dirtree). Os servidores web e de banco de dados alvos devem atender aos seguintes requisitos para explorar a injeção de SQL fora de banda:</p><ul><li><p> Falta de validação de entrada do aplicativo web</p></li><li><p> Um ambiente de rede que dispensa perímetros de segurança e permite que o servidor de banco de dados de destino inicie solicitações de saída (via DNS ou HTTP) para o público em geral</p></li><li><p> Direitos suficientes para executar a função necessária para enviar a solicitação de saída</p></li></ul>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Como os bancos de dados SQL geralmente contêm dados confidenciais, a perda de confidencialidade é um problema frequente com vulnerabilidades de injeção de SQL.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Se comandos SQL ruins forem usados para verificar nomes de usuários e senhas, pode ser possível conectar-se a um sistema como outro usuário sem nenhum conhecimento prévio da senha.</p></li><li><p> Controle de acesso: Mecanismo de proteção contra bypass: Se as informações de autorização forem mantidas em um banco de dados SQL, pode ser possível alterar essas informações por meio da exploração bem-sucedida de uma vulnerabilidade de injeção de SQL.</p></li><li><p> Integridade: Modificar dados do aplicativo: Assim como é possível ler informações confidenciais, também é possível fazer alterações ou até mesmo excluir essas informações com um ataque de injeção de SQL.</p></li></ul>",
        "remediation": "<ul><li><p>Validação de entrada tanto no lado do cliente quanto do servidor.</p></li><li><p> Tratamento correto de erros para evitar que informações detalhadas sobre eles sejam exibidas.</p></li><li><p> Examine as arquiteturas da rede e da segurança.</p></li><li><p> Use o menor privilégio possível ao alocar a conta do banco de dados ao aplicativo.</p></li><li><p> O uso de medidas de segurança adicionais, como sistemas de prevenção de intrusão (IPS) e firewalls de aplicativos da web (WAF).</p></li><li><p> Estar constantemente atento a anomalias e ter procedimentos eficazes de resposta a incidentes em vigor como uma rede de controles de segurança.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
          "https://cwe.mitre.org/data/definitions/22.html"
        ],
        "locale": "en",
        "title": "Path Traversal",
        "vulnType": "OWASP WSTG",
        "description": "<p>A vulnerabilidade &quot;Path Traversal&quot; permite que usuários acessem arquivos ou diretórios localizados em outras partes do sistema escapando da área restrita. É possível acessar quaisquer arquivos e diretórios armazenados no sistema de arquivos ajustando variáveis que se referem a arquivos com sequências &quot;ponto-ponto-barra (../)&quot; e suas variações.</p>",
        "observation": "<ul><li><p>Integridade: Executar códigos ou comandos não autorizados: O invasor pode criar ou substituir arquivos críticos usados para executar códigos, como programas ou bibliotecas.</p></li><li><p> Confidencialidade: Executar códigos ou comandos não autorizados: O invasor pode criar ou substituir arquivos críticos usados para executar códigos, como programas ou bibliotecas.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: O invasor pode criar ou substituir arquivos críticos usados para executar códigos, como programas ou bibliotecas.</p></li><li><p> Integridade: Modificar arquivos ou diretórios: O invasor pode sobrescrever ou criar arquivos críticos, como programas, bibliotecas ou dados importantes. Se o arquivo alvo for usado para um mecanismo de segurança, o invasor poderá burlar esse mecanismo. Por exemplo, anexar uma nova conta ao final de um arquivo de senhas pode permitir que um invasor burle a autenticação.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: O invasor pode ler o conteúdo de arquivos inesperados e expor dados confidenciais. Se o arquivo alvo for usado para um mecanismo de segurança, o invasor poderá burlar esse mecanismo. Por exemplo, ao ler um arquivo de senhas, o invasor pode realizar ataques de força bruta para adivinhar senhas e invadir uma conta no sistema.</p></li><li><p> Disponibilidade: DoS: Travar, Sair ou Reiniciar: O invasor pode sobrescrever, excluir ou corromper arquivos críticos inesperados, como programas, bibliotecas ou dados importantes. Isso pode impedir o funcionamento do software e, no caso de mecanismos de proteção como autenticação, pode bloquear todos os usuários do software.</p></li></ul>",
        "remediation": "<p>Use uma estratégia de validação de entrada de dados ou uma lista de entradas que estejam em estrita conformidade com os requisitos e rejeite qualquer entrada que não atenda a esses requisitos.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/620.html"
        ],
        "locale": "en",
        "title": "Permit Password Change",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os usuários devem ter a opção de alterar suas senhas sempre que necessário. Considere, por exemplo, a situação em que eles usam frequentemente a mesma senha em diferentes aplicativos. Os usuários devem atualizar imediatamente suas informações de login em cada aplicativo em que se registraram, caso sua senha seja comprometida. Portanto, existe a possibilidade de a conta de um usuário ser comprometida se o aplicativo não lhe der acesso a um recurso de atualização de senha.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: verificações de controle de acesso para dados ou funcionalidades específicas do usuário podem ser ignoradas.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: conforme as senhas envelhecem, a probabilidade de que elas sejam comprometidas aumenta.</p></li></ul>",
        "remediation": "<p>Os aplicativos devem oferecer um recurso que permita ao usuário modificar sua própria senha.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema",
          "https://cwe.mitre.org/data/definitions/1018.html",
          "https://owasp.org/www-community/attacks/Session_Prediction"
        ],
        "locale": "en",
        "title": "Predictable Session ID",
        "vulnType": "OWASP WSTG",
        "description": "<p>O principal objetivo do ataque de predição de sessão é prever valores de ID de sessão que permitam a um invasor contornar o processo de autenticação de um aplicativo. Um invasor pode prever um valor de ID de sessão válido e obter acesso ao aplicativo investigando e compreendendo o processo de geração de ID de sessão.</p><p> Primeiro, o invasor precisa coletar alguns valores válidos de ID de sessão, usados para identificar usuários autenticados. Em seguida, ele precisa entender a estrutura do ID de sessão, as informações usadas para criá-lo e o algoritmo de criptografia ou hash usado pelo aplicativo para protegê-lo. Algumas implementações ruins usam IDs de sessão compostos pelo nome de usuário ou outras informações previsíveis, como o carimbo de data/hora ou o endereço IP do cliente. Na pior das hipóteses, essas informações são usadas em texto simples ou codificadas usando algum algoritmo fraco, como a codificação base64.</p><p> Além disso, o invasor pode implementar uma técnica de força bruta para gerar e testar diferentes valores do ID da sessão até obter acesso ao aplicativo.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>Ao utilizar hashes e variáveis não repetíveis, como registros de data e hora, uma sessão não previsível deve ser gerada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/306.html"
        ],
        "locale": "en",
        "title": "Principle of Least Privilege",
        "vulnType": "OWASP WSTG",
        "description": "<p>De acordo com o princípio do menor privilégio, as contas devem ter o menor número de privilégios necessários para realizar suas operações comerciais. Isso inclui direitos de usuário, bem como permissões de rede, sistema de arquivos e recursos, como limites de CPU e memória.</p>",
        "observation": "<ul><li><p>Outros: Outros: A exposição de uma funcionalidade crítica essencialmente fornece ao invasor o nível de privilégio dessa funcionalidade. As consequências dependerão da funcionalidade associada, mas podem variar desde a leitura ou modificação de dados confidenciais, acesso a funcionalidades administrativas ou outras funcionalidades privilegiadas, ou possivelmente até a execução de código arbitrário.</p></li></ul>",
        "remediation": "<ul><li><p>O princípio consiste em conceder a uma conta de usuário apenas os privilégios essenciais ao seu trabalho. Por exemplo, um usuário reserva não precisa instalar software: portanto, ele tem direitos apenas para executar backups e aplicativos relacionados. Quaisquer outros privilégios, como instalar novos softwares, são bloqueados.</p></li><li><p> O princípio se aplica também a um usuário de computador pessoal que normalmente trabalha com uma conta de usuário normal e abre uma conta privilegiada e protegida por senha (ou seja, um superusuário) somente quando a situação realmente exige isso.</p></li><li><p> Este princípio também pode ser aplicado às suas aplicações web. Em vez de depender exclusivamente de métodos de autenticação baseados em funções usando sessões, queremos atribuir privilégios aos usuários por meio de um sistema de autenticação baseado em banco de dados.</p></li></ul><p> Ainda usamos sessões para identificar se o usuário estava conectado corretamente, só que agora, em vez de atribuir a esse usuário uma função específica, atribuímos a ele privilégios para verificar quais ações ele tem privilégios para executar no sistema. Além disso, uma grande vantagem desse método é que, sempre que um usuário precisar receber menos privilégios, suas alterações serão aplicadas imediatamente, pois a atribuição não depende da sessão, que, de outra forma, teria que expirar primeiro.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "Reflected Cross-site Scripting (reflected XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Por meio de um ataque de Cross-Site Scripting (XSS), um invasor pode inserir um código malicioso que é executado no navegador da vítima, assumir o controle do navegador e usá-lo para acessar credenciais, dados confidenciais ou dados de sessão do aplicativo afetado.</p><p> Para que o Cross-Site Scripting refletido funcione, o invasor deve estar em contato direto com a vítima para enviar o código malicioso que será executado no navegador da vítima como parte do aplicativo.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados do Aplicativo: O ataque mais comum realizado com cross-site scripting envolve a divulgação de informações armazenadas em cookies do usuário. Normalmente, um usuário mal-intencionado cria um script do lado do cliente que, quando analisado por um navegador, realiza alguma atividade (como enviar todos os cookies do site para um determinado endereço de e-mail). Esse script será carregado e executado por cada usuário que visita o site. Como o site que solicita a execução do script tem acesso aos cookies em questão, o script malicioso também tem.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Em algumas circunstâncias, pode ser possível executar código arbitrário no computador de uma vítima quando o cross-site scripting é combinado com outras falhas.</p></li><li><p> Controle de Acesso: Leitura de Dados de Aplicativos: A consequência de um ataque XSS é a mesma, independentemente de ser armazenado ou refletido. A diferença está em como o payload chega ao servidor. O XSS pode causar uma variedade de problemas para o usuário final, cuja gravidade varia de um incômodo ao comprometimento total da conta. Algumas vulnerabilidades de cross-site scripting podem ser exploradas para manipular ou roubar cookies, criar solicitações que podem ser confundidas com as de um usuário válido, comprometer informações confidenciais ou executar código malicioso nos sistemas do usuário final para uma variedade de propósitos nefastos. Outros ataques prejudiciais incluem a divulgação de arquivos do usuário final, a instalação de programas de Cavalo de Troia, o redirecionamento do usuário para outra página ou site, a execução de controles &quot;Active X&quot; (no Microsoft Internet Explorer) de sites que o usuário considera confiáveis e a modificação da apresentação do conteúdo.</p></li></ul>",
        "remediation": "<p>Prevenir ataques de Cross-site Scripting (XSS) não é trivial, dependendo da complexidade do aplicativo e de como ele manipula dados controláveis pelo usuário e do tipo de vulnerabilidade de Cross-site Scripting (XSS).</p><p> No entanto, existem certos princípios gerais que as seguintes medidas devem implementar:</p><ul><li><p> Filtrar entrada de dados: trate todas as entradas do usuário como não confiáveis, filtre o mais estritamente possível com base no que é esperado ou é uma entrada válida.</p></li><li><p> Use criptografia: com o uso de uma técnica de criptografia apropriada, evite que ele seja interpretado como conteúdo legítimo.</p></li><li><p> Use cabeçalhos de resposta seguros: os navegadores aceitam diferentes tipos de cabeçalhos para evitar ataques de Cross-site Scripting (XSS), como uma Política de Segurança de Conteúdo (CSP) e &#39;X-XSS-Protection&#39;.</p></li><li><p> Proteger cookies: É necessário mitigar o possível acesso a cookies de sessão com o sinalizador &quot;HttpOnly&quot;. Este sinalizador desabilita o acesso a cookies por meio de JavaScript do lado do cliente.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/284.html"
        ],
        "locale": "en",
        "title": "Remote Code Execution (RCE) by Improper Access Control",
        "vulnType": "OWASP WSTG",
        "description": "<p>A falha do software em impor controles de acesso a um objeto de site é chamada de vulnerabilidade de controle de acesso impróprio. Ao acessar o serviço web, um usuário mal-intencionado pode comprometer a segurança do software e realizar determinadas ações não autorizadas.</p>",
        "observation": "<ul><li><p>Outro: Varia de acordo com o contexto: Um invasor pode acessar qualquer funcionalidade que seja inadvertidamente acessível à fonte.</p></li></ul>",
        "remediation": "<p>Não permita que usuários anônimos acessem este site.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Remote Code Execution (RCE)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ataques conhecidos como execução remota de código (RCE) permitem que um invasor execute remotamente código malicioso em um computador. Uma vulnerabilidade de RCE pode resultar na execução de malware ou na tomada completa de uma máquina comprometida por um invasor.</p>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>Restrinja a origem, seja uma entrada ou um caminho aberto que leva a um aplicativo, a partir do qual o RCE está sendo acessado.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cwe.mitre.org/data/definitions/20.html",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection"
        ],
        "locale": "en",
        "title": "Remote Code Execution (RCE) by Injection of Local Files",
        "vulnType": "OWASP WSTG",
        "description": "<p>Utilizando os procedimentos de chamada de arquivo vulneráveis do aplicativo, a inclusão de arquivo local (LFI) é o processo de inclusão de arquivos que já estão no servidor. Por exemplo, quando uma página recebe uma entrada que é o caminho para um arquivo local, essa vulnerabilidade se manifesta. Caracteres que atravessam o diretório podem ser injetados para acessar outros arquivos no servidor se essa entrada não for devidamente higienizada.</p>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>A melhor maneira de se livrar de vulnerabilidades de inclusão de arquivos é nunca fornecer nenhuma entrada de usuário a nenhuma API de sistema/framework de arquivos. Se isso não for possível, o aplicativo pode manter uma lista de arquivos permitidos que a página pode incluir e, em seguida, usar um número de índice ou outro identificador para acessar o arquivo desejado. Para que usuários mal-intencionados não possam manipular a rota, qualquer solicitação que contenha um identificador inválido deve ser rejeitada. É aconselhável seguir as recomendações do guia OWASP (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat Sheet.html) para boas práticas de remediação contra vulnerabilidades de inclusão de arquivos.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Remote Code Execution (RCE) by Remote File Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>O processo de inclusão de referências a arquivos remotos de outro servidor por meio de procedimentos de chamada de arquivo fracos implementados na aplicação é conhecido como inclusão remota de arquivos (RFI). Essa falha, por exemplo, ocorre quando uma página baixa arquivos de fontes externas e os inclui na aplicação. É possível alterar o recurso para fazer a solicitação contra um que seja controlado por um invasor se essa entrada não for devidamente higienizada.</p>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>A melhor maneira de se livrar de vulnerabilidades de inclusão de arquivos é nunca fornecer nenhuma entrada de usuário a nenhuma API de sistema/framework de arquivos. Se isso não for possível, o aplicativo pode manter uma lista de arquivos permitidos que a página pode incluir e, em seguida, usar um número de índice ou outro identificador para acessar o arquivo desejado. Para que usuários mal-intencionados não possam manipular a rota, qualquer solicitação que contenha um identificador inválido deve ser rejeitada. É aconselhável seguir as recomendações do guia OWASP (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat Sheet.html) para boas práticas de remediação contra vulnerabilidades de inclusão de arquivos.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "https://cwe.mitre.org/data/definitions/1275.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/1275.html"
        ],
        "locale": "en",
        "title": "Samesite Attribute Missing in Cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Foi descoberto que os cookies criados pelo aplicativo não utilizam o mecanismo de proteção SameSite no momento do acesso ao site. Essa proteção previne potenciais ataques de falsificação de solicitação entre sites (CSRF), regulando como os cookies são enviados em solicitações para outros domínios.</p>",
        "observation": "<ul><li><p>Confidencialidade: Modificar Dados do Aplicativo: Se o site não impuser defesa adicional contra ataques CSRF, a não utilização dos valores &quot;Lax&quot; ou &quot;Strict&quot; pode aumentar o risco de exposição a ataques CSRF. A probabilidade de violação de integridade é baixa, pois um ataque bem-sucedido não depende apenas de um atributo SameSite inseguro. Para realizar um ataque CSRF, muitas condições devem ser atendidas, como a ausência de tokens CSRF, a ausência de confirmações para ações sensíveis no site, um cabeçalho &quot;Content-Type&quot; &quot;simples&quot; na solicitação HTTP, entre outras.</p></li></ul>",
        "remediation": "<p>Sempre que possível, é aconselhável criar cookies com o atributo &#39;SameSite&#39; definido como o valor &#39;Strict&#39;.</p><p> Definir-Cookie:<Cookie> =<Value> ; Caminho=/; Expira=<Date> ; Domínio=<Domain> ; Seguro; HttpOnly; SameSite=Rigoroso</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/330.html"
        ],
        "locale": "en",
        "title": "Secrets Should Be Secure Random Generated",
        "vulnType": "OWASP WSTG",
        "description": "<p>Senhas, tokens de API e chaves secretas devem ser gerados dinamicamente. Esses tokens podem se tornar previsíveis e ser usados por invasores para comprometer contas de usuários sempre que não forem gerados dinamicamente.</p>",
        "observation": "<ul><li><p>Outro: Outro: Quando um mecanismo de proteção depende de valores aleatórios para restringir o acesso a um recurso sensível, como um ID de sessão ou uma semente para gerar uma chave criptográfica, o recurso que está sendo protegido pode ser acessado adivinhando o ID ou a chave</p></li><li><p> Outro: Se o software depender de IDs únicos e inadivisíveis para identificar um recurso, um invasor poderá adivinhar o ID de um recurso pertencente a outro usuário. O invasor poderá então ler o recurso ou pré-criar um recurso com o mesmo ID para impedir que o programa legítimo o envie corretamente ao usuário pretendido. Por exemplo, um produto pode manter informações de sessão em um arquivo cujo nome é baseado em um nome de usuário. Um invasor poderá pré-criar esse arquivo para um usuário vítima e, em seguida, definir as permissões para que o aplicativo não possa gerar a sessão para a vítima, impedindo-a de usar o aplicativo.</p></li><li><p> Controle de acesso: obter privilégios ou assumir identidade: quando um mecanismo de autorização ou autenticação depende de valores aleatórios para restringir o acesso a uma funcionalidade restrita, como uma ID de sessão ou uma semente para gerar uma chave criptográfica, um invasor pode acessar a funcionalidade restrita adivinhando a ID ou a chave.</p></li></ul>",
        "remediation": "<p>Esses valores devem ser gerados dinamicamente e válidos somente uma vez quando se trata de tokens de API e chaves secretas. O token secreto deve ser criptograficamente &quot;aleatório e seguro&quot;, ter pelo menos 120 bits de entropia efetiva, ser salgado com um valor especial de 32 bits gerado aleatoriamente e ter hash usando uma função de hash reconhecida (unidirecional).</p><p> Em vez de fornecer ao usuário uma senha gerada dinamicamente, as senhas devem ser criadas pelo próprio usuário. Para ativar sua conta e criar uma senha própria, o usuário deve receber um link único com um token criptograficamente aleatório por e-mail ou SMS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "Secure Attribute Missing in Cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os atributos Secure e HttpOnly são usados para garantir que os cookies sejam enviados com segurança e não possam ser acessados por scripts ou terceiros indesejados. Um cookie com o atributo Secure só é enviado ao servidor em conjunto com uma solicitação HTTPS criptografada. A API JavaScript não pode acessar um cookie com o atributo HttpOnly; em vez disso, o servidor o recebe.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: Um invasor que realiza um ataque bem-sucedido de cross-site scripting ou man-in-the-middle poderá ler o conteúdo do cookie e exfiltrar as informações obtidas.</p></li></ul>",
        "remediation": "<p>Os atributos HttpOnly e Secure devem ser usados pelo servidor ao definir cookies para mitigar essa vulnerabilidade. Um exemplo é fornecido abaixo:</p><p> Definir-Cookie: cookie1=info1; Seguro; Somente HTTP</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses",
          "https://cwe.mitre.org/data/definitions/525.html"
        ],
        "locale": "en",
        "title": "Sensitive Information Stored in Browser",
        "vulnType": "OWASP WSTG",
        "description": "<p>O aplicativo web não possui uma política de cache adequada que estabeleça o nível de cache que deve ser feito para cada página web e os campos de formulário associados.</p><p> Informações podem ser armazenadas pelos navegadores para fins de histórico e cache. Para melhorar o desempenho, o cache é usado para que dados baixados anteriormente não precisem ser baixados novamente. Para a conveniência do usuário, mecanismos de histórico são usados para que ele possa ver exatamente o que foi visualizado quando o recurso foi recuperado. Quando dados confidenciais (como seu endereço, número do cartão de crédito, número do Seguro Social ou nome de usuário) são exibidos ao usuário, esses dados podem ser armazenados em cache ou salvos para fins de histórico e, portanto, podem ser recuperados consultando o cache do navegador ou simplesmente pressionando o botão Voltar do navegador.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler dados do aplicativo: O invasor pode ler informações confidenciais</p></li></ul>",
        "remediation": "<p>Utilize uma política de cache restritiva para formulários e páginas da web que potencialmente contenham informações confidenciais. Não armazene informações confidenciais desnecessárias no cache. Considere usar criptografia no cache. Dependendo se essas informações estão armazenadas no histórico ou em cache, as seguintes ações podem ser tomadas para mitigar a vulnerabilidade:</p><p> É possível impedir que o botão Voltar exiba dados confidenciais. Isso pode ser feito das seguintes maneiras:</p><p> Enviando a página por HTTPS.</p><p> Configurando Cache-Control: must-revalidate</p><p> Para evitar que páginas contendo informações confidenciais sejam armazenadas em cache, é necessário fazer uma das duas coisas a seguir:</p><p> Defina a diretiva &quot;Cache-Control: no-cache, no-store&quot; ou &quot;Pragma: no-cache&quot; nos cabeçalhos de resposta dessas páginas. Por exemplo:</p><p> HTTP/1.1:</p><p> Controle de cache: sem cache, sem armazenamento.</p><p> HTTP/1.0:</p><p> Pragma: sem cache (ou Cache-Control: sem cache).</p><p> Expira em:<past date or an illegal value (ex: 0)></p><p> Inclua em cada página HTML que tenha informações confidenciais o seguinte código:</p><p> HTTP/1.1:</p><p><META HTTP-EQUIV=\"Cache-Control\" CONTENT=\"no-cache, no-store\"></p><p> HTTP/1.0: </p><p><META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"></p><p><META HTTP-EQUIV=\"Expires\" CONTENT=\"Sat, 01-Jan-2000 00:00:00GMT\"></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection",
          "https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection#:~:text=The%20Server%2DSide%20Includes%20attack,use%20through%20user%20input%20fields.",
          "- http://httpd.apache.org/docs/current/howto/ssi.html",
          "https://cwe.mitre.org/data/definitions/96.html",
          "https://cwe.mitre.org/data/definitions/116.html",
          "https://cwe.mitre.org/data/definitions/159.html"
        ],
        "locale": "en",
        "title": "Server Side Injection (SSI)",
        "vulnType": "OWASP WSTG",
        "description": "<p>SSI (Server-Side Includes) são diretivas presentes em aplicações web usadas para alimentar uma página HTML com conteúdo dinâmico. São semelhantes aos CGIs, exceto que os SSIs são usados para executar algumas ações antes que a página atual seja carregada ou enquanto ela está sendo exibida. Para fazer isso, o servidor web analisa os SSIs antes de entregar a página ao usuário.</p><p> O ataque de injeção SSI permite atacar uma aplicação web injetando scripts em páginas HTML ou executando código arbitrário remotamente. Ele pode ser explorado por meio da manipulação de diretivas SSI em uso na aplicação ou forçar seu uso injetando novas diretivas por meio de campos de entrada do usuário.</p><p> É possível verificar se a aplicação está validando corretamente os dados nos campos de entrada inserindo caracteres que são usados nas diretivas SSI, como:</p><p> &lt; ! # = / . &quot; -&gt; e [a-zA-Z0-9]</p><p> Outra maneira de descobrir se o aplicativo é potencialmente vulnerável é verificar a presença de páginas com extensões .stm, .shtm e .shtml. No entanto, a ausência dessas páginas não significa que o aplicativo esteja protegido contra ataques SSI.</p><p> Em ambos os casos, o ataque só será bem-sucedido se o servidor web permitir a execução do SSI sem a devida validação prévia. Se isso ocorrer, poderá ser possível acessar e manipular arquivos e processos do sistema com a permissão do proprietário do processo do servidor web.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: O código injetado pode acessar dados/arquivos restritos.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar.</p></li><li><p> Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário.</p></li><li><p> Não repúdio: ocultar atividades: muitas vezes, as ações executadas pelo código de controle injetado não são registradas.</p></li><li><p> Integridade: Modifique os dados do aplicativo: As comunicações entre os componentes podem ser modificadas de maneiras inesperadas. Comandos inesperados podem ser executados, ignorando outros mecanismos de segurança. Os dados recebidos podem ser mal interpretados.</p></li></ul>",
        "remediation": "<p>Dados controláveis pelo usuário não devem, sempre que possível, ser incorporados por aplicativos em páginas renderizadas para diretivas SSI. Geralmente, existem maneiras alternativas mais seguras de implementar a funcionalidade necessária. Se isso for considerado impraticável, os dados devem ser rigorosamente validados. O ideal é utilizar uma lista branca de valores específicos aceitáveis. Na ausência dela, somente strings alfanuméricas curtas serão aceitas. Quaisquer dados adicionais, incluindo qualquer metacaractere SSI em potencial, devem ser excluídos da entrada.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/918.html"
        ],
        "locale": "en",
        "title": "Server-side Request Forgery (SSRF)",
        "vulnType": "OWASP WSTG",
        "description": "<p>A vulnerabilidade SSRF (Server-Side Request Forgery) surge quando é possível direcionar o servidor para enviar uma solicitação a qualquer domínio usando os dados de entrada do usuário. Quando o usuário que faz a solicitação não recebe a resposta do servidor, essa vulnerabilidade pode se tornar &quot;cega&quot;. Nenhuma resposta é fornecida neste caso. No entanto, com base no tempo de resposta do servidor, é possível realizar uma enumeração das máquinas próximas na rede.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de dados do aplicativo: O código injetado pode acessar dados/arquivos restritos.</p></li><li><p> Integridade: Executar códigos ou comandos não autorizados: O invasor pode criar ou substituir arquivos críticos usados para executar códigos, como programas ou bibliotecas.</p></li></ul>",
        "remediation": "<p>Colocar na lista de permissões as entradas permitidas por esse parâmetro é a mitigação adequada para essa vulnerabilidade. Em outras palavras, aceite apenas os caminhos para os recursos que você realmente precisa acessar, pois, a partir de agora, fazer o contrário concede ao usuário www-data acesso a qualquer área do sistema de permissões onde ele possa ler.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection",
          "https://cwe.mitre.org/data/definitions/94.html",
          "https://portswigger.net/research/server-side-template-injection"
        ],
        "locale": "en",
        "title": "Server-side Template Injection (SSTI)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando um usuário solicita uma visualização HTML, os aplicativos modernos a geram usando um mecanismo de template (também conhecido como &quot;templates&quot;). As funções integradas da linguagem de programação nesses mecanismos de template permitem a execução de funções de risco e até mesmo de código no servidor que hospeda o aplicativo. É possível usar essas funções para executar código no servidor se um usuário mal-intencionado conseguir injetar diretivas de template, e estas serão então renderizadas pelo mecanismo de template.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar.</p></li><li><p> Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário.</p></li><li><p> Não-repúdio: Ocultar atividades: Muitas vezes, as ações executadas pelo código de controle injetado não são registradas.</p></li></ul>",
        "remediation": "<p>Certifique-se de não passar variáveis controláveis pelo usuário para as funções que renderizam modelos. A higienização da entrada é crucial caso seja necessário para evitar que caracteres sejam interpretados.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation",
          "https://cwe.mitre.org/data/definitions/384.html"
        ],
        "locale": "en",
        "title": "Session Fixation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Autenticar um usuário ou estabelecer uma nova sessão de usuário sem invalidar nenhum identificador de sessão existente dá ao invasor a oportunidade de roubar sessões autenticadas.</p><p> Este cenário é comumente observado quando:</p><ol><li><p> Um aplicativo web autentica um usuário sem primeiro invalidar a sessão existente, continuando assim a sessão já associada ao usuário.</p></li><li><p> Um invasor é capaz de forçar um identificador de sessão conhecido em um usuário para que, depois que o usuário se autenticar, o invasor tenha acesso à sessão autenticada.</p></li><li><p> A aplicação ou contêiner utiliza identificadores de sessão previsíveis. Na exploração genérica de vulnerabilidades de fixação de sessão, um invasor cria uma nova sessão em uma aplicação web e registra o identificador de sessão associado. O invasor então faz com que a vítima associe e, possivelmente, autentique o servidor usando esse identificador de sessão, concedendo ao invasor acesso à conta do usuário por meio da sessão ativa.</p></li></ol>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>A contramedida para uma vulnerabilidade de fixação de sessão é codificar o aplicativo de forma que ele não aceite um token que foi forçado na sessão da vítima.</p><p> As etapas a seguir fornecem uma maneira robusta de proteger um aplicativo da web contra esses ataques:</p><ul><li><p> Não aceite identificadores de sessão em parâmetros GET ou POST. Isso dificulta muito a exploração por um invasor, pois é mais fácil induzir a vítima a fazer a solicitação sem vulnerabilidades no navegador. Além disso, todos os IDs de sessão devem ser gerados pelo servidor; não deve haver necessidade de o cliente propor um novo ID de sessão para o aplicativo.</p></li><li><p> Alterar o ID da sessão após o login. O servidor deve gerar um novo ID de sessão e defini-lo como um cookie após o login do usuário. Qualquer sessão existente do usuário deve ser destruída no servidor.</p></li><li><p> Forneça uma função de logout e expire sessões antigas. O usuário deve poder escolher quando encerrar sua sessão com o aplicativo, o que deve encerrar imediatamente qualquer sessão atual no servidor e não simplesmente excluir o cookie do navegador. Os dados da sessão também devem expirar automaticamente após um determinado período, para reduzir o tempo que um invasor pode usar uma sessão comprometida.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking",
          "https://capec.mitre.org/data/definitions/593.html"
        ],
        "locale": "en",
        "title": "Session Hijacking",
        "vulnType": "OWASP WSTG",
        "description": "<p>O ataque de sequestro de sessão consiste em explorar o mecanismo de controle de sessão da web, que normalmente é gerenciado por um token de sessão.</p><p> Como a comunicação HTTP utiliza diversas conexões TCP diferentes, o servidor web precisa de um método para reconhecer as conexões de cada usuário. O método mais útil se baseia em um token que o servidor web envia ao navegador do cliente após a autenticação bem-sucedida. Um token de sessão normalmente é composto por uma string de largura variável e pode ser usado de diversas maneiras, como na URL, no cabeçalho da solicitação HTTP como um cookie, em outras partes do cabeçalho da solicitação HTTP ou até mesmo no corpo da solicitação HTTP.</p><p> O ataque de sequestro de sessão compromete o token de sessão roubando ou prevendo um token de sessão válido para obter acesso não autorizado ao servidor web.</p><p> O token de sessão pode ser comprometido de diferentes maneiras; as mais comuns são: - Previsão de token de sessão. - Varredura de sessão. - Ataques do lado do cliente (XSS, código JavaScript malicioso, cavalos de Troia, etc.). - Ataque man-in-the-middle. - Ataque man-in-the-browser.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>Utilize processos de geração de chaves de sessão padrão do setor que geram chaves de sessão usando muita entropia e criptografam e assinam adequadamente os tokens de identidade em trânsito. Você pode contar com diversos servidores web e de aplicativos comuns para realizar essa tarefa. Para cada sessão, use um tempo limite de sessão. Após esse período, encerre a sessão do usuário caso ele não tenha efetuado logout explicitamente. Uma nova chave de sessão deverá ser gerada se o usuário efetuar login novamente.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_SS heet.html"
        ],
        "locale": "en",
        "title": "Stored Cross-site Scripting (stored XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ataques de Cross-Site Scripting (XSS) são um tipo de injeção na qual scripts maliciosos são injetados em sites inofensivos e confiáveis. Ataques XSS ocorrem quando um invasor usa uma aplicação web para enviar código malicioso, geralmente na forma de um script do lado do navegador, para um usuário final diferente. Falhas que permitem que esses ataques sejam bem-sucedidos são bastante comuns e ocorrem em qualquer lugar onde uma aplicação web usa a entrada de um usuário dentro da saída que gera sem validá-la ou codificá-la. Ataques armazenados são aqueles em que o script injetado é armazenado permanentemente nos servidores de destino, como em um banco de dados, em um fórum de mensagens, registro de visitantes, campo de comentários, etc. A vítima então recupera o script malicioso do servidor quando este solicita as informações armazenadas. O XSS armazenado também é às vezes chamado de XSS Persistente ou Tipo I.</p>",
        "observation": "<ul><li><p>Confidencialidade: Leitura de Dados do Aplicativo: O ataque mais comum realizado com cross-site scripting envolve a divulgação de informações armazenadas em cookies do usuário. Normalmente, um usuário mal-intencionado cria um script do lado do cliente que, quando analisado por um navegador, realiza alguma atividade (como enviar todos os cookies do site para um determinado endereço de e-mail). Esse script será carregado e executado por cada usuário que visita o site. Como o site que solicita a execução do script tem acesso aos cookies em questão, o script malicioso também tem.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Em algumas circunstâncias, pode ser possível executar código arbitrário no computador de uma vítima quando o cross-site scripting é combinado com outras falhas.</p></li><li><p> Controle de Acesso: Leitura de Dados de Aplicativos: A consequência de um ataque XSS é a mesma, independentemente de ser armazenado ou refletido. A diferença está em como o payload chega ao servidor. O XSS pode causar uma variedade de problemas para o usuário final, cuja gravidade varia de um incômodo ao comprometimento total da conta. Algumas vulnerabilidades de cross-site scripting podem ser exploradas para manipular ou roubar cookies, criar solicitações que podem ser confundidas com as de um usuário válido, comprometer informações confidenciais ou executar código malicioso nos sistemas do usuário final para uma variedade de propósitos nefastos. Outros ataques prejudiciais incluem a divulgação de arquivos do usuário final, a instalação de programas de Cavalo de Troia, o redirecionamento do usuário para outra página ou site, a execução de controles &quot;Active X&quot; (no Microsoft Internet Explorer) de sites que o usuário considera confiáveis e a modificação da apresentação do conteúdo.</p></li></ul>",
        "remediation": "<p>A higienização de todas as entradas do lado do servidor é necessária para reduzir o risco de XSS armazenado. Para fornecer todos os dados ao lado do cliente, crie um filtro de caixa branca com os caracteres permitidos e use codificação HTML.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Verify Breached Passwords",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ao longo dos anos, violações resultaram na divulgação de inúmeros bancos de dados contendo credenciais roubadas. Usuários estão sujeitos a ataques de dicionário se selecionarem senhas comprometidas.</p>",
        "observation": "<ul><li><p>Controle de acesso: obtenha privilégios ou assuma identidade: um invasor pode facilmente adivinhar senhas de usuários e obter acesso às contas de usuários.</p></li></ul>",
        "remediation": "<p>Verifique se as senhas inseridas durante a criação da conta, login e alterações de senha são comparadas a uma lista de senhas que foram comprometidas. O aplicativo deve exigir que o usuário insira novamente uma senha que ainda não tenha sido comprometida, caso a senha escolhida já tenha sido comprometida.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Verify That Structured Data Is Strongly Typed and Validated",
        "vulnType": "OWASP WSTG",
        "description": "<p>Quando dados estruturados são rigidamente tipados e verificados em relação a um esquema especificado, é possível criar uma aplicação proativa defensável. Usando os esquemas definidos, a aplicação agora pode medir tudo o que está fora de sua operação pretendida e deve ser usada para rejeitar entradas se as verificações do esquema retornarem falso.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de recursos (memória): Um invasor pode fornecer valores inesperados e causar uma falha no programa ou consumo excessivo de recursos, como memória e CPU.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Um invasor pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de maneiras inesperadas, incluindo execução de comandos arbitrários.</p></li></ul>",
        "remediation": "<p>Verifique se os dados estruturados são fortemente tipados e validados em relação a um esquema definido, incluindo os caracteres permitidos, comprimento e padrão (por exemplo, números de cartão de crédito ou números de telefone, ou validando se dois campos relacionados são lógicos, como validar subúrbios e códigos postais correspondentes).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
          "https://cwe.mitre.org/data/definitions/693.html"
        ],
        "locale": "en",
        "title": "Weakness in the Second Factor Authentication Mechanism (2FA).",
        "vulnType": "OWASP WSTG",
        "description": "<p>O mecanismo de autenticação de dois fatores (2FA) de um modelo de segurança de confiança zero é um componente essencial. Você precisa confirmar que os usuários que tentam acessar dados confidenciais são quem afirmam ser para protegê-los. Ameaças de segurança como phishing, ataques de força bruta, exploração de credenciais, etc., que visam senhas e contas de usuários, podem ser defendidas com sucesso com 2FA.</p><p> Digamos que você conclua a autenticação primária em um aplicativo com um nome de usuário e uma senha. A internet é usada para transmitir essas informações (rede primária). Seria preferível concluir a autenticação de dois fatores usando um canal diferente (fora de banda). A autenticação fora de banda inclui coisas como aprovar uma notificação push enviada pela sua rede móvel.</p><p> Apesar de altamente recomendada, essa abordagem pode ser prejudicial se não for usada corretamente.</p>",
        "observation": "<ul><li><p>Controle de acesso: Ignorar mecanismo de proteção: O aplicativo não usa ou usa incorretamente um mecanismo de proteção que forneça defesa suficiente contra ataques direcionados ao produto.</p></li></ul>",
        "remediation": "<p>Embora seja melhor omitir o SMS como opção exclusiva de 2FA, isso não resolve o motivo da inclusão do 2FA. Para evitar ataques de força bruta e outros ataques direcionados à autenticação de senhas, é necessário algum tipo de 2FA. Algumas alternativas ao SMS de 2FA:</p><ul><li><p> Autenticação de hardware. A autenticação de hardware depende de um dispositivo físico dedicado para conceder acesso. Além da senha, os usuários precisam inserir um código aleatório gerado pelo dispositivo. Os logins falharão sem o código. Os fornecedores de autenticação de hardware incluem RSA SecurID e Thales SafeNet.</p></li><li><p> Autenticação de software. A autenticação de software segue essencialmente o mesmo princípio da autenticação de hardware. Mas, em vez de exigir um dispositivo físico, os códigos de token são gerados com um aplicativo móvel. O aplicativo de autenticação mais popular é o Google Authenticator, mas existem muitas opções. Por exemplo, a RSA agora oferece seu autenticador SecurID como um aplicativo.</p></li><li><p> Autenticação baseada em IP. Este método verifica o endereço IP do usuário ao efetuar login. Você pode bloquear o acesso a endereços IP específicos suspeitos de serem maliciosos ou simplesmente permitir logins apenas de endereços e intervalos de IP conhecidos. A autenticação baseada em IP pode ser usada em conjunto com outras maneiras de adicionar outra camada de proteção.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
          "https://cwe.mitre.org/data/definitions/640.html"
        ],
        "locale": "en",
        "title": "Weaknesses in Password Change/reset Functionality",
        "vulnType": "OWASP WSTG",
        "description": "<p>Os aplicativos normalmente possuem um mecanismo que permite que um usuário acesse sua conta caso esqueça a senha. O mecanismo de recuperação de senha frequentemente não é confiável, o que aumenta a probabilidade de que alguém, além do usuário legítimo do sistema, consiga acessar a conta desse usuário. Um esquema de autenticação de senha forte é completamente destruído por procedimentos de recuperação de senha fracos.</p><p> Essa fraqueza pode existir devido à pergunta de segurança ser muito fácil de adivinhar (por exemplo, porque a pergunta é muito comum ou as respostas podem ser encontradas usando redes sociais). Também pode haver uma fraqueza de implementação no código do mecanismo de recuperação de senha que pode, por exemplo, enganar o sistema e fazê-lo enviar a nova senha para uma conta de e-mail diferente da conta de e-mail do usuário. A taxa de redefinição de senha pode não ser regulamentada, então um usuário legítimo pode ter o serviço negado se um invasor tentar recuperar sua senha em rápida sucessão. O sistema pode enviar a senha original para o usuário em vez de gerar uma nova senha temporária. Em resumo, a funcionalidade de recuperação de senha, se não for cuidadosamente projetada e implementada, pode frequentemente se tornar o elo mais fraco do sistema, podendo ser mal utilizada de forma a permitir que um invasor obtenha acesso não autorizado ao sistema.</p>",
        "observation": "<ul><li><p>Controle de acesso: obter privilégios ou assumir identidade: um invasor pode obter acesso não autorizado ao sistema recuperando as credenciais de autenticação do usuário legítimo.</p></li><li><p> Disponibilidade: DoS: Consumo de recursos: Um invasor pode negar serviço a usuários legítimos do sistema iniciando um ataque de força bruta no mecanismo de recuperação de senha usando IDs de usuários legítimos.</p></li><li><p> Outro: Outro: A funcionalidade de segurança do sistema é usada contra o sistema pelo invasor.</p></li></ul>",
        "remediation": "<p>Certifique-se de que o mecanismo de recuperação de senha tenha filtrado e validado completamente cada informação fornecida pelo usuário.</p><ul><li><p> Use várias perguntas de segurança em vez das usuais perguntas de segurança fracas.</p></li><li><p> Certifique-se de que não haja muitas respostas incorretas para uma pergunta de segurança. Após um certo (pequeno) número de respostas erradas, desative o recurso de recuperação de senha.</p></li><li><p> Exija que os usuários respondam corretamente à pergunta de segurança antes de permitir que eles redefinam suas senhas e recebam a nova senha no endereço de e-mail que eles têm em arquivo.</p></li><li><p> No mecanismo de recuperação de senha, nunca deixe o usuário escolher o endereço de e-mail para o qual a nova senha será enviada.</p></li><li><p> Crie uma nova senha temporária em vez de compartilhar a antiga.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
          "https://cwe.mitre.org/data/definitions/804.html",
          "https://cwe.mitre.org/data/definitions/645.html",
          "https://cwe.mitre.org/data/definitions/1216.html",
          "https://cwe.mitre.org/data/definitions/307.html"
        ],
        "locale": "en",
        "title": "Weaknesses in Protection Against Brute Force Attacks",
        "vulnType": "OWASP WSTG",
        "description": "<p>Uma ameaça comum enfrentada por desenvolvedores web é um ataque de adivinhação de senhas, conhecido como ataque de força bruta. Um ataque de força bruta consiste em uma tentativa de descobrir uma senha tentando sistematicamente todas as combinações possíveis de letras, números e símbolos até encontrar a combinação correta que funciona. Se o seu site exige autenticação do usuário, você é um bom alvo para um ataque de força bruta.</p><p> Um invasor sempre pode descobrir uma senha por meio de um ataque de força bruta, mas a desvantagem é que pode levar anos para encontrá-la. Dependendo do tamanho e da complexidade da senha, pode haver trilhões de combinações possíveis. Para acelerar um pouco as coisas, um ataque de força bruta pode começar com palavras do dicionário ou palavras do dicionário ligeiramente modificadas, pois a maioria das pessoas as usará em vez de uma senha completamente aleatória. Esses ataques são chamados de ataques de dicionário ou ataques híbridos de força bruta. Ataques de força bruta colocam as contas dos usuários em risco e inundam seu site com tráfego desnecessário.</p>",
        "observation": "<ul><li><p>Controle de acesso: mecanismo de proteção de bypass: quando a autorização, autenticação ou outro mecanismo de proteção depende de entidades CAPTCHA para garantir que somente agentes humanos possam acessar determinada funcionalidade, um invasor automatizado, como um bot, pode acessar a funcionalidade restrita adivinhando o CAPTCHA.</p></li><li><p> Disponibilidade: DoS: Consumo de recursos (outros): As contas dos usuários podem ser bloqueadas.</p></li><li><p> Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode executar um número arbitrário de tentativas de autenticação usando senhas diferentes e, eventualmente, obter acesso à conta alvo.</p></li></ul>",
        "remediation": "<p>Crie um sistema de defesa suficiente para impedir ataques. Verifique se a combinação de números e letras em um sistema de captcha é difícil de prever e não forneça a resposta em nenhuma das respostas enviadas ao navegador do usuário.</p><p> Utilize procedimentos de desbloqueio de conta de acordo com o nível de risco. Do mais arriscado ao mais seguro:</p><ul><li><p> Bloqueio e desbloqueio com base no tempo.</p></li><li><p> Desbloqueio usando autoatendimento (envio de e-mail de desbloqueio para endereço de e-mail registrado).</p></li><li><p> Administrador desbloqueando manualmente.</p></li><li><p> Identificação positiva do usuário para desbloqueio manual do administrador.</p></li><li><p> Utilizando um mecanismo de autoatendimento: Como mencionado anteriormente, esse mecanismo de autoatendimento precisa ser suficientemente seguro para impedir que o invasor consiga desbloquear as contas por conta própria.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout",
          "https://cwe.mitre.org/data/definitions/1018.html"
        ],
        "locale": "en",
        "title": "Weaknesses in the Logout Process Due to Inactivity.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Todos os aplicativos devem implementar um tempo limite de inatividade para sessões. Esse tempo limite define o tempo que uma sessão permanecerá ativa em caso de inatividade do usuário, fechando e invalidando a sessão após o período de inatividade definido desde a última solicitação HTTP recebida pelo aplicativo web para um determinado ID de sessão. O tempo limite mais apropriado deve ser um equilíbrio entre segurança (tempo limite menor) e usabilidade (tempo limite maior) e depende em grande parte do nível de sensibilidade dos dados manipulados pelo aplicativo. Por exemplo, um tempo de logout de 60 minutos para um fórum público pode ser aceitável, mas um tempo tão longo seria muito longo em um aplicativo de home banking (onde um tempo limite máximo de 15 minutos é recomendado). De qualquer forma, qualquer aplicativo que não imponha um logout baseado em tempo limite deve ser considerado inseguro, a menos que tal comportamento seja exigido por um requisito funcional específico.</p><p> O tempo limite limita as possibilidades de um invasor adivinhar e usar um ID de sessão válido de outro usuário e, em certas circunstâncias, pode proteger computadores públicos da reutilização de sessões. No entanto, se o invasor conseguir sequestrar uma determinada sessão, o tempo limite de inatividade não limita suas ações, pois ele pode gerar atividade na sessão periodicamente para mantê-la ativa por um período mais longo.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Um invasor pode permanecer conectado por muito tempo, o que pode reutilizar IDs antigos ou excluídos e referências diretas.</p></li></ul>",
        "remediation": "<p>O lado do servidor deve implementar o gerenciamento de tempo limite e expiração de sessão. Um invasor pode manipular dados controlados pelo cliente usados para impor o tempo limite de sessão, como valores de cookies ou outros parâmetros do cliente que rastreiam referências de tempo (como o número de minutos desde o login), a fim de prolongar a sessão. Como resultado, o aplicativo deve monitorar o tempo ocioso do lado do servidor e, após o término do tempo limite, invalidar automaticamente a sessão do usuário atual e excluir todos os dados do lado do cliente.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality",
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Weaknesses in the Logout Process.",
        "vulnType": "OWASP WSTG",
        "description": "<p>O mecanismo de logout do usuário dos aplicativos está implementado incorretamente.</p><p> Um usuário pode interagir com o aplicativo novamente sem precisar inserir suas informações de login novamente porque a sessão não é invalidada corretamente.</p>",
        "observation": "<ul><li><p>Controle de acesso: execute códigos ou comandos não autorizados: essa fraqueza pode levar à exposição de recursos ou funcionalidades a agentes não intencionais, possivelmente fornecendo aos invasores informações confidenciais ou até mesmo executando códigos arbitrários.</p></li></ul>",
        "remediation": "<p>É recomendável que o botão de logout esteja presente em todas as páginas do aplicativo, que ele invalide a sessão tanto no cliente quanto no servidor, e que o servidor rejeite quaisquer outras conexões feitas com o mesmo token.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/611.html",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://capec.mitre.org/data/definitions/201.html"
        ],
        "locale": "en",
        "title": "XML External Entity Processing (XXE)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Alguns aplicativos transmitem dados entre o navegador e o servidor usando o formato XML. Os aplicativos que realizam isso quase sempre processam os dados XML no servidor usando uma biblioteca padrão ou API de plataforma. Um exemplo de entidade XML especial é aquela cujos valores definidos são carregados de fontes diferentes do DTD em que são declarados. Do ponto de vista da segurança, entidades externas são particularmente interessantes porque permitem a definição de uma entidade com base no conteúdo de um caminho de arquivo ou URL.</p>",
        "observation": "<ul><li><p>Confidencialidade: Ler arquivos ou diretórios: Se o invasor conseguir incluir um DTD criado e um resolvedor de entidade padrão estiver habilitado, o invasor poderá acessar arquivos arbitrários no sistema.</p></li><li><p> Integridade: Mecanismo de Proteção de Ignorância: O DTD pode incluir solicitações HTTP arbitrárias que o servidor pode executar. Isso pode levar a outros ataques que aproveitam a relação de confiança do servidor com outras entidades.</p></li><li><p> Disponibilidade: DoS: Consumo de Recursos (Memória): O software pode consumir ciclos excessivos de CPU ou memória usando um URI que aponta para um arquivo grande ou um dispositivo que sempre retorna dados, como /dev/random. Como alternativa, o URI pode referenciar um arquivo que contém muitas referências de entidades aninhadas ou recursivas para tornar a análise ainda mais lenta.</p></li></ul>",
        "remediation": "<p>De acordo com a Folha de Dicas do OWASP &quot;XXE Prevention&quot;, desative o processamento de entidades externas XML e DTDs em todos os analisadores XML no aplicativo. Além disso, use validação, filtragem ou higienização de entrada do lado do servidor que seja positiva (&quot;lista de permissões&quot;) para afastar dados hostis em documentos XML, cabeçalhos ou nós.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "XML Schema (XSD)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Você tem maior controle sobre o tipo de entrada do usuário que pode ser fornecida em sua aplicação ao adicionar esquemas aos seus arquivos XML. Quando feito corretamente, isso reduz drasticamente o vetor de ataque de um invasor. No entanto, como uma linha de defesa adicional, você deve sempre aplicar sua própria validação e rejeição de entrada. Essa estratégia também é preferível porque você também deseja neutralizar e registrar solicitações e entradas do usuário.</p>",
        "observation": "<ul><li><p>Disponibilidade: DoS: Consumo de recursos (memória): Um invasor pode fornecer valores inesperados e causar uma falha no programa ou consumo excessivo de recursos, como memória e CPU.</p></li><li><p> Confidencialidade: Leitura de arquivos ou diretórios: Um invasor pode ler dados confidenciais se conseguir controlar referências de recursos.</p></li><li><p> Disponibilidade: Executar códigos ou comandos não autorizados: Um invasor pode usar entradas maliciosas para modificar dados ou possivelmente alterar o fluxo de controle de maneiras inesperadas, incluindo execução de comandos arbitrários.</p></li></ul>",
        "remediation": "<p>Verifique se o esquema XSD está validado para garantir que o documento XML esteja formatado corretamente e, em seguida, valide cada campo de entrada antes que os dados sejam processados.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection",
          "https://owasp.org/www-community/attacks/XPATH_Injection",
          "https://cwe.mitre.org/data/definitions/94.html"
        ],
        "locale": "en",
        "title": "XPATH Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Semelhante à injeção de SQL, os ataques de injeção de XPath ocorrem quando um site cria uma consulta XPath para dados XML usando dados fornecidos pelo usuário. XPath é um tipo de declaração descritiva direta que permite pesquisar uma informação específica no XML. Você pode especificar atributos específicos a serem procurados e padrões a serem correspondidos, assim como em SQL. É prática comum aceitar algum tipo de entrada na string de consulta ao usar XML para um site, a fim de identificar o conteúdo a ser encontrado e exibido na página. Essas consultas podem ser alteradas para retornar mais dados do que deveriam ou até mesmo executar código do lado do servidor se o invasor enviar uma string XPath maliciosa.</p>",
        "observation": "<ul><li><p>Controle de acesso: Mecanismo de proteção de bypass: Em alguns casos, o código injetável controla a autenticação; isso pode levar a uma vulnerabilidade remota.</p></li><li><p> Controle de acesso: obtenha privilégios ou assuma identidade: o código injetado pode acessar recursos que o invasor está diretamente impedido de acessar.</p></li><li><p> Outros: Executar código ou comandos não autorizados: Ataques de injeção de código podem levar à perda de integridade dos dados em quase todos os casos, pois os dados do plano de controle injetados são sempre incidentais à recuperação ou gravação de dados. Além disso, a injeção de código pode frequentemente resultar na execução de código arbitrário.</p></li><li><p> Não repúdio: ocultar atividades: muitas vezes, as ações executadas pelo código de controle injetado não são registradas.</p></li></ul>",
        "remediation": "<p>Antes de serem incluídas em consultas XPATH (XML), as entradas do usuário devem ser rigorosamente validadas. É recomendável utilizar uma lista de permissões que restrinja os caracteres ou valores que o aplicativo aceitará como entrada do usuário.</p><p> Se a lista de permissões não for uma opção, uma alternativa menos preferida é empregar uma lista negra que, no mínimo, elimine os caracteres &quot;&quot;&#39;/ @ = * [] (y)</p>"
      }
    ]
  }
]